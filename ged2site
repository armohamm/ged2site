#!/usr/bin/env perl

# Author Nigel Horne: njh@bandsman.co.uk
# Copyright (C) 2015-2017, Nigel Horne

# Usage is subject to licence terms.
# The licence terms of this software are as follows:
# Personal single user, single computer use: GPL2
# All other users (including Commercial, Charity, Educational, Government)
#	must apply in writing for a licence for use from Nigel Horne at the
#	above e-mail.

# TODO: Geo::Coder::GeocodeFarm, once github issue 1 has been fixed
# TODO: Investigate BGS
# TODO: Finish XML

# -d:	Download copies of objects rather than link to them, useful if the
#	objects are on pay sites such as FMP
#

# For the Simile Timeline format see
#	http://www.simile-widgets.org/wiki/Timeline_EventSources
# For visjs see
#	http://visjs.org/docs/timeline/

use strict;
use warnings;
use autodie qw(:all);
# use warnings::unused;

# BEGIN {
	# *CORE::GLOBAL::die = \&main::die;
# }

no lib '.';
use Gedcom;
use Getopt::Std;
use Gedcom;
use Lingua::EN::NameCase;
use Lingua::EN::NameParse;
use Lingua::EN::Numbers::Ordinate;
use Lingua::EN::ABC;
use Lingua::EN::Inflect;
# use Lingua::EN::AddressParse;
use Geo::StreetAddress::US;
use Locale::US;
use DateTime::Format::Natural;
use Genealogy::Gedcom::Date;
use DateTime::Duration;
use Geo::Coder::List 0.15;
use Geo::Coder::Free 0.03;
use Geo::Coder::Postcodes 0.02;
use Geo::Coder::OSM;
use Geo::Coder::XYZ;
use Geo::Coder::GooglePlaces;
use Geo::Coder::Google;
use Geo::Coder::CA;
use Geo::Coder::Ovi;
use Geo::Coder::RandMcnally;
use Geo::Coder::US::Census;
use Geo::Parser::Text;
use HTML::GoogleMaps::V3 0.10;
use Term::ANSIColor;
use HTML::Entities;
use HTTP::Cache::Transparent;
use File::Spec;
use File::Temp;
use File::Basename;
use Image::Info;
use URI;
use URI::Find::Schemeless;
use LWP::Simple;
use LWP::UserAgent::Throttled;
use Sort::Key::DateTime;
use String::ProgressBar;
use Text::Names;
use Text::Names::GB;
use MIME::Base64;
use Text::Names;
use Memoize;
use File::Copy;
use Data::Fetch;
use Config::Auto;
use Locale::Object::Country;
use List::Util;

no lib '.';

my %opts;
getopts('cdfFG:g:h:J:lmwv', \%opts);

die "Usage: $0 [ -c ] [ -d ] [ -F ] [ -f ] [ -g google-search-verification ] [ -h home-person-name ] [ -l ] [ -m [-G Google-Maps-GeoLocation-key ] [ -J Google-Maps-JavaScript-key ] ] [ -w ] filename [ filename2 ]\n" unless($ARGV[0]);

my $me;
my @myancestors;
my %warned;
my %printed;
my %places;
my $surnames;
my %censuses;
my %images;
my %all_events;	# Maps events to people
my %all_dates;	# Maps dates to the hashref from Genealogy::Gedcom::Date

my $nameparser = Lingua::EN::NameParse->new(extended_titles => 1);
my $ged = Gedcom->new(gedcom_file => $ARGV[0], read_only => 1);
my $ged2;
if($ARGV[1]) {
	$ged2 = Gedcom->new(gedcom_file => $ARGV[1], read_only => 1);
}
my $dfn = DateTime::Format::Natural->new();
my $date_parser = Genealogy::Gedcom::Date->new();
my $oneday = DateTime::Duration->new(days => 1);
my $tenmonths = DateTime::Duration->new(months => 10);
my $sixteenyears = DateTime::Duration->new(years => 16);
my $fetcher;
my $year_1000 = DateTime->new(year => 1000, month => 1, day => 1);

my $config;

eval { $config = Config::Auto::parse() };

my %gp_args;
my $geolocation_key;
if($opts{'G'}) {
	$geolocation_key = $opts{'G'};
} elsif($ENV{'GMAP_KEY'}) {	# Compatability with various CPAN modules
	$geolocation_key = $ENV{'GMAP_KEY'};
} elsif($config && $config->{'google_maps_geolocation_key'}) {
	$geolocation_key = $config->{'google_maps_gelocation_key'};
}
$gp_args{'key'} = $geolocation_key;
$gp_args{'api_key'} = $geolocation_key;

my $javascript_key;
if($opts{'J'}) {
	$javascript_key = $opts{'J'};
} elsif($config && $config->{'google_maps_javascript_key'}) {
	$javascript_key = $config->{'google_maps_javascript_key'};
}

my $geocoder;
my $textgeocoder;

if($opts{'m'} || $opts{'w'}) {
	my $l = $ENV{'LANG'};
	if(defined($l) && ($l =~ /^([a-z]{2})/i)) {
		$gp_args{'language'} = lc($1);
	}

	if($geolocation_key) {
		$geocoder = Geo::Coder::List->new()
			->push({ regex => qr/^\d.+?,.+?,\s*(USA|US|United States)$/i, geocoder => Geo::Coder::US::Census->new() })
			->push({ regex => qr/(Canada|USA|US|United States)$/i, geocoder => Geo::Coder::CA->new() })
			->push({ regex => qr/(USA|US|United States)$/i, geocoder => Geo::Coder::RandMcnally->new() })
			->push({ regex => qr/^[\w\s\-]+?,[\w\s]+,[\w\s]+?$/, geocoder => Geo::Coder::Free->new() })
			->push({ regex => qr/^\w+,\s*\w+,\s*(UK|United Kingdom|England)$/i, geocoder => Geo::Coder::Postcodes->new() })
			->push(Geo::Coder::OSM->new())
			->push(Geo::Coder::Ovi->new())
			->push(Geo::Coder::GooglePlaces->new(%gp_args))
			->push(Geo::Coder::XYZ->new())
			->push(Geo::Coder::Google->new());
	} else {
		$geocoder = Geo::Coder::List->new()
			->push({ regex => qr/^\d.+?,.+?,\s*(USA|US|United States)$/i, geocoder => Geo::Coder::US::Census->new() })
			->push({ regex => qr/(Canada|USA|US|United States)$/i, geocoder => Geo::Coder::CA->new() })
			->push({ regex => qr/(USA|US|United States)$/i, geocoder => Geo::Coder::RandMcnally->new() })
			->push({ regex => qr/^\w+,\s*\w+,\s*(UK|United Kingdom|England)$/i, geocoder => Geo::Coder::Postcodes->new() })
			->push({ regex => qr/^[\w\s\-]+?,[\w\s]+,[\w\s]+?$/, geocoder => Geo::Coder::Free->new() })
			->push(Geo::Coder::OSM->new())
			->push(Geo::Coder::Ovi->new())
			->push(Geo::Coder::XYZ->new())
			->push(Geo::Coder::Google->new())
			->push(Geo::Coder::GooglePlaces->new(%gp_args));
	}

	my $ua = LWP::UserAgent::Throttled->new();
	$ua->env_proxy(1);

	# TODO: throttle other geocoders
	$ua->throttle({
		'nominatim.openstreetmap.org' => 1,
		'geocode.xyz' => 1,
		'geocoder.ca' => 1,
		'api.postcodes.io' => 1,
		'where.desktop.mos.svc.ovi.com' => 1,
		'geocoding.geo.census.gov' => 1,
		'a2ageo.rmservers.com/mapengine3/sli' => 1,
	});

	# G::C::GooglePlaces
	$ua->throttle({ 'maps.googleapis.com' => 0.1 }) unless($geolocation_key);
	$ua->ssl_opts(verify_hostname => 0);	# prevent "Can't connect to geocode.xyz:443 (certificate verify failed)"
	$geocoder->ua($ua);

	$textgeocoder = Geo::Parser::Text->new('https://geocoder.ca');
}

# TODO: BMAP_KEY for Geo::Coder::Bing

# FIXME: Do this properly
my %censusmaps = (
	'1841 England Census' => '1841 UK Census',
	'1841 England, Wales & Scotland Census - Findmypast' => '1841 UK Census',
	'1851 England Census' => '1851 UK Census',
	'1851 Wales Census' => '1851 UK Census',
	'1851 Census' => '1851 UK Census',
	'1851 England, Wales & Scotland Census - Findmypast' => '1851 UK Census',
	'1851 United Kingdom Census Sample' => '1851 UK Census',
	'1861 England Census' => '1861 UK Census',
	'1861 England, Wales & Scotland Census - Findmypast' => '1861 UK Census',
	'1871 England Census' => '1871 UK Census',
	'1871 England, Wales & Scotland Census - Findmypast' => '1871 UK Census',
	'1871 Wales Census' => '1871 UK Census',
	'1881 England Census' => '1881 UK Census',
	'1881 England, Wales & Scotland Census - Findmypast' => '1881 UK Census',
	'1881 Isle of Man Census' => '1881 Isle of Man Census',
	'1881 Wales Census' => '1881 UK Census',
	'1891 England Census' => '1891 UK Census',
	'1891 England, Wales & Scotland Census - Findmypast' => '1891 UK Census',
	'1891 Wales Census' => '1891 UK Census',
	'1901 England Census' => '1901 UK Census',
	'1901 Wales Census' => '1901 UK Census',
	'1901 England, Wales & Scotland Census - Findmypast' => '1901 UK Census',
	'1911 England Census' => '1911 UK Census',
	'1911 England Census Summary Books' => '1911 UK Census',
	'1911 Census for England & Wales - Findmypast' => '1911 UK Census',
	'1911 Wales Census' => '1911 UK Census',

	'1851 Census of Canada East, Canada West, New Brunswick, and Nova Scotia' => '1851 Canadian Census',
	'1861 Census of Canada' => '1861 Canadian Census',
	'1871 Census of Canada' => '1871 Canadian Census',
	'Kent County, New Brunswick Census, 1871: Eight Subdistricts' => '1871 Canadian Census',
	'1881 Census of Canada' => '1881 Canadian Census',
	'1891 Census of Canada' => '1891 Canadian Census',
	'1901 Census of Canada' => '1901 Canadian Census',
	'1906 Canada Census of Manitoba, Saskatchewan, and Alberta' => '1906 Canadian Census',
	'1911 Census of Canada' => '1911 Canadian Census',
	'1916 Canada Census of Manitoba, Saskatchewan, and Alberta' => '1916 Canadian Census',
	'1921 Census of Canada' => '1921 Canadian Census',

	'1850 United States Federal Census' => '1850 US Census',
	'US Census 1850 - Findmypast' => '1850 US Census',

	'New York, State Census, 1855' => '1855 New York Census',

	'1860 United States Federal Census' => '1860 US Census',
	'US Census 1860 - Findmypast' => '1860 US Census',
	'Nebraska, State Census Collection, 1860-1885' => '1860 US Census',

	'New York, State Census, 1865' => '1865 New York Census',

	'US Census 1870 - Findmypast' => '1870 US Census',
	'1870 United States Federal Census' => '1870 US Census',

	'New York, State Census, 1875' => '1875 New York Census',

	'1880 United States Federal Census' => '1880 US Census',
	'US Census 1880 - Findmypast' => '1880 US Census',
	'Us Census 1880 - Findmypast' => '1880 US Census',

	'US Census 1900 - Findmypast' => '1900 US Census',
	'1900 United States Federal Census' => '1900 US Census',

	'New York, State Census, 1905' => '1905 New York Census',

	'1910 United States Federal Census' => '1910 US Census',
	'US Census 1910 - Findmypast' => '1910 US Census',

	'1920 United States Federal Census' => '1920 US Census',
	'US Census 1920 - Findmypast' => '1920 US Census',

	'New York, State Census, 1925' => '1925 New York Census',

	'US Census 1930 - Findmypast' => '1930 US Census',
	'1930 United States Federal Census' => '1930 US Census',

	'South Dakota, State Census, 1935' => '1935 US Census',

	'US Census 1940 - Findmypast' => '1940 US Census',
	'1940 United States Federal Census' => '1940 US Census',
);

# sub realdie
# {
	# CORE::die (@_);
# }

# sub die {
	# my @arg = shift;
# 
	# print STDERR "@arg\n" if($arg[0]);
# 
	# my $i = 0;
	# while((my @call_details = (caller($i++)))) {
		# print STDERR $call_details[1], ':', $call_details[2], ' in function ', $call_details[3], "\n";
	# }
# 
	# realdie @arg;
# }

# $ged->validate();

my $home = $opts{h};
if((!defined($home)) && defined($config)) {
	$home = $config->{'home'};
	if(ref($home) eq 'ARRAY') {
		$home = join(' ', @{$home});
	}
}

if($home) {
	$me = $ged->get_individual($home);
	unless($me) {
		die "$0: Can't find '$opts{h}' in $ARGV[0]";
	}
}

my $dot;
my $jpegtran;
my $jpegoptim;
if($opts{'F'}) {
	if(-x '/usr/bin/dot') {
		$dot = '/usr/bin/dot';
	} elsif(-x '/usr/local/bin/dot') {
		$dot = '/usr/local/bin/dot';
	} elsif(-x '/sw/bin/dot') {
		$dot = '/sw/bin/dot';
	}

	if(!defined($dot)) {
		if($opts{'f'}) {
			die 'Graphviz not found, no family trees';
		}
		if($opts{'w'}) {
			red_warning(warning => 'Graphviz not found, no family trees');
		}
	} else {
		require Image::Magick::Thumbnail;
		Image::Magick::Thumbnail->import();
		print "Using $dot\n" if($opts{'v'});
	}
}

my @dirlist = ('static-site', 'dynamic-site/databases');
if($dot || $opts{'d'}) {
	push @dirlist, 'static-site/img';
	push @dirlist, 'dynamic-site/img';
	push @dirlist, 'thumbs';

	if(-x '/usr/bin/jpegtran') {
		$jpegtran = '/usr/bin/jpegtran';
	} elsif(-x '/usr/local/bin/jpegtran') {
		$jpegtran = '/usr/local/bin/jpegtran';
	} elsif(-x '/opt/local/bin/jpegtran') {
		$jpegtran = '/opt/local/bin/jpegtran';
	} elsif(-x '/sw/bin/jpegtran') {
		$jpegtran = '/sw/bin/jpegtran';
	}
	if(-x '/usr/bin/jpegoptim') {
		$jpegoptim = '/usr/bin/jpegoptim';
	} elsif(-x '/usr/local/bin/jpegoptim') {
		$jpegoptim = '/usr/local/bin/jpegoptim';
	} elsif(-x '/sw/bin/jpegoptim') {
		$jpegoptim = '/sw/bin/jpegoptim';
	}
}

my $gedcal;
if(-x '/usr/bin/gedcom') {
	$gedcal = '/usr/bin/gedcom';
} elsif(-x '/usr/local/bin/gedcom') {
	$gedcal = '/usr/local/bin/gedcom';
} elsif(-x '../gedcom/gedcom') {
	$gedcal = '../gedcom/gedcom';
}

if($gedcal) {
	push @dirlist, 'static-site/calendar';
}

foreach my $dir(@dirlist) {
	mkdir $dir if(!-d $dir);
}

my $browser;

if($opts{'d'} || $opts{'m'}) {
	$browser = LWP::UserAgent->new();
	$browser->env_proxy(1);
	my $cachedir = File::Spec->catfile(File::Spec->tmpdir(), 'http-cache-transparent');
	if(!-d $cachedir) {
		mkdir $cachedir || die "$cachedir: $!";
	}
	HTTP::Cache::Transparent::init({
		BasePath => $cachedir,
		Verbose => $opts{'v'} ? 1 : 0,
		NoUpdate => 24 * 60 * 60,
	});
}

my @everyone = $ged->individuals();
my $total = scalar(@everyone);
my $index = 0;
my $dtl = DateTime::Locale->load($ENV{'LANG'});

my $pr;
my $us;
if($opts{'w'}) {
	require Locale::US;
	Locale::US->import();

	$us = Locale::US->new();
} else {
	$pr = String::ProgressBar->new(max => $total, length => 60);
}

memoize('Gedcom::Individual::as_string');
memoize('stepsabove');

open(my $xml, '>', 'dynamic-site/databases/people.xml');
print $xml "<?xml version=\"1.0\" encoding=\"US-ASCII\"?>\n<table>";
open(my $csv, '>', 'dynamic-site/databases/people.csv');
print $csv "entry!title!home!alive!bio!father!mother!children!citations!notes!media!family_tree!map_head!map_body!dob!dod!profile_thumbnail!marriages!sex!birth_coords!death_coords!birth_country!death_country!warnings\n";

open(my $timeline_xml, '>', 'dynamic-site/timeline.xml');
print $timeline_xml "<?xml version=\"1.0\"?>\n",
	"<data date-time-format=\"iso8601\">\n";

open(my $visjs, '>', 'dynamic-site/visjs.html');
print $visjs <<'HEADER';
<!DOCTYPE HTML>
<html lang="en" dir="ltr">
<head>
	<meta charset="utf8">
	<meta http-equiv="x-ua-compatible" content="ie=edge">
	<meta name="description" content="Blood relatives timeline - A ged2site webpage">
	<title>Blood Relatives' Timeline</title>

	<link rel="stylesheet" href="/css/web.css" type="text/css" media="screen">
  <style type="text/css">
    body, html {
	font-family: sans-serif;
	font-size: 10px;
    }
  </style>

  <script async type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.19.1/vis.min.js"></script>
  <link async href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.19.1/vis.min.css" rel="stylesheet" type="text/css" />
  <style type="text/css">
	/* Limit the width of the biography box */
	/*div.vis-tooltip { font-size:10px; white-space: normal; width: 30em; word-wrap: break-word; }*/
	div.vis-tooltip {
		font-size: 10px;
		white-space: normal;
		width: 30em;
		max-width: 300px;
		word-wrap: break-word;
		padding: 5px;
	}
  </style>
</head>
<body>
	<h1>Blood Relatives' Timeline</h1>
	<p><font size=+1>
		Click and move the mouse to move around the timeline.
		Only people with known birth dates are shown.
	</font></p>

	<div id="visualization">
	    <div class="menu">
		<input type="button" id="zoomIn" value="Zoom In"/>
		<input type="button" id="zoomOut" value="Zoom Out"/>
		<input type="button" id="moveLeft" value="Scroll Left"/>
		<input type="button" id="moveRight" value="Scroll Right"/>
	    </div>
	</div>

<script type="text/javascript">
  // DOM element where the Timeline will be attached
  var container = document.getElementById('visualization');

  // Create a DataSet (allows two way data-binding)
	var items = new vis.DataSet([
HEADER

# TODO: Add a -p option to do something like this - it's useful in debugging
# foreach my $person($ged->get_individual('Dolly Cowell')) {

foreach my $person($ged->individuals()) {
	$index++;
	if(!$opts{'w'}) {
		$| = 1;
		$pr->update($index);
		$pr->write();
		$| = 0;
	}
	if(!$printed{$person->{'xref'}}) {
		# FIXME: change &eacute; to e
		print $xml "\n\t<person person_id=\"$index\">";
		print_person({ person => $person });
		print $xml "\n\t</person>";
		print $csv "\n";
		if($opts{'v'}) {
			my $log = $geocoder->log();
			$geocoder->flush();
			foreach my $l(@{$log}) {
				if($l->{geocoder}) {
					if($l->{error}) {
						print $l->{location}, ': ',  $l->{timetaken}, 's with ',  $l->{geocoder}, '(', $l->{error}, ")\n";
					} else {
						print $l->{location}, ': ',  $l->{timetaken}, 's with ',  $l->{geocoder}, "\n";
					}
				} else {
					print $l->{location}, ": cached\n";
				}
			}
		}
	}
}
print $xml "\n</table>\n";
close $xml;
close $csv;

print $timeline_xml "</data>\n";
close $timeline_xml;

print $visjs <<'FOOTER';
	]);

  // Configuration for the Timeline
  // var options = { zoomable: false, horizontalScroll: true, verticalScroll: true, autoResize: true, height: '500px', min: '1500', max: '2017' };
  var timelineHeight = Math.round($(window).height() * 0.85) + 'px';
var options = {
    zoomKey: 'ctrlKey',
    verticalScroll: true,
    min: '1500',
    max: '2017',
    height: timelineHeight
};

  // Create a Timeline
  var timeline = new vis.Timeline(container, items, options);

    /**
     * Move the timeline a given percentage to left or right
     * @param {Number} percentage   For example 0.1 (left) or -0.1 (right)
     */
    function move (percentage) {
	var range = timeline.getWindow();
	var interval = range.end - range.start;

	timeline.setWindow({
	    start: range.start.valueOf() - interval * percentage,
	    end:   range.end.valueOf()   - interval * percentage
	});
    }

    // attach events to the navigation buttons
    document.getElementById('zoomIn').onclick    = function () { timeline.zoomIn( 0.2); };
    document.getElementById('zoomOut').onclick   = function () { timeline.zoomOut( 0.2); };
    document.getElementById('moveLeft').onclick  = function () { move( 0.2); };
	document.getElementById('moveRight').onclick = function () { move(-0.2); };
</script>
</body>
</html>
FOOTER

close $visjs;

if(!$opts{'w'}) {
	print "\n$index records processed\n";
}

my $name;
if($me) {
	$name = 'of ' . $me->as_string(nee => 1);
} else {
	$name = 'on this site';
}

if($opts{'w'}) {
	open(my $html, '>', 'static-site/todo.html');
	print $html "<html><head><title>Errors in the Family Tree $name</title>",
		"</head><body><center><h1>Errors in the Family Tree $name</h1>";
	if($me) {
		print $html '[ <a href="', make_filename_from_person(person => $me), '">Home</a> ]';
	}
	print $html ' | [ <a href="surnames.html">Surnames Index</a> ]',
		' | [ <a href="censuses.html">Census Index</a> ]',
		' | [ <a href="calendar/index.html">Calendar</a> ]',
		' | [ <a href="history.html">Family History</a> ]</center><br>';

	open(my $csv, '>', 'dynamic-site/databases/todo.csv');
	print $csv "entry!person!title!summary!error\n";
	my $index = 1;

	foreach my $person($ged->individuals()) {
		if($person->{'warnings'}) {
			print $html '<h2>',
				'<a href="', make_filename_from_person(person => $person), '">', $person->as_string(include_years => 1), '</a></h2>',
				map { HTML::Entities::encode($_) . '<br>' } @{$person->{'warnings'}};
			my %seen_warnings;
			foreach my $warning(@{$person->{'warnings'}}) {
				next if($seen_warnings{$warning});
				my $summary;
				if($warning =~ /^\[\d+\]: no citation title/) {
					$summary = 'Citation Title Missing';
				} elsif($warning =~ /^(.+) date .+ has no citations/) {
					$summary = "$1 date without citation";
				} elsif($warning =~ /^(.+) place .+ has no citations/) {
					$summary = "$1 place without citation";
				} elsif($warning =~ /^Contains a residence .+ without a date/) {
					$summary = 'Residence Without a Date';
				} elsif($warning =~ /.+in notes is not found$/) {
					$summary = 'URL in notes not found';
				} elsif($warning =~ /^Unhandled event type:/) {
					$summary = 'Unhandled Event Type';
				} elsif($warning =~ /^Census citation missing between /) {
					$summary = 'Missing Census';
				} elsif($warning =~ /^Check the gender of the record/) {
					$summary = 'Possibly Wrong Gender';
				} elsif($warning =~ /^Two residence records for/) {
					$summary = 'Duplicate Residence Records';
				} elsif($warning =~ /^Year of baptism .+ is before the year of birth /) {
					$summary = 'Baptism Before Birth';
				} elsif($warning =~ /^Born less than 10 months before sibling /) {
					$summary = 'Born Under 10 Months Before Sibling';
				} elsif($warning =~ /^married when less than 16 years old/) {
					$summary = 'Under Age 16 When Married';
				} elsif($warning =~ /^unknown sex/) {
					$summary = 'Sex Not Specified';
				} elsif($warning =~ /^married, but not husband relationship/) {
					$summary = 'Husband Relationship Missing';
				} elsif($warning =~ /^Departure record without destination/) {
					$summary = 'Departure Without Destination';
				} elsif($warning =~ /^Census information not used to approximate a date of birth/) {
					$summary = 'Date of Birth not Calulated';
				} elsif($warning =~ /^Unknown state in/) {
					$summary = 'Unknown US State';
				} elsif($warning =~ /^Residence information in/) {
					$summary = 'Child census not in a parent';
				} elsif($warning =~ /^Unknown birth location/) {
					$summary = 'Birth location not found';
				} elsif($warning =~ /^Unknown death location/) {
					$summary = 'Death location not found';
				} elsif($warning =~ /\sisn't found$/) {
					$summary = 'Location not found';
				} else {
					$summary = $warning;
				}
				print $csv "$index!",
					$person->{'xref'}, '!',
					$person->as_string(include_years => 1),
					"!$summary!",
					HTML::Entities::encode($warning),
					"\n";
				$seen_warnings{$warning} = $index;
				$index++;
			}
		}
	}
	close $csv;
	close $html;
}

if(scalar(%censuses)) {
	print "Creating census index\n";
	open(my $html, '>', 'static-site/censuses.html');
	print $html "<html><head><title>Censuses in the Family Tree $name</title>",
		"</head><body><center><h1>Censuses in the Family Tree $name</h1></center><br><ul>";

	open($csv, '>', 'dynamic-site/databases/censuses.csv');
	print $csv "entry!census!person\n";

	$index = 1;
	foreach my $census(sort keys(%censuses)) {
		my $filename = $census;
		$filename =~ tr/ /_/;
		print $html "<li><a href=\"$filename.html\">$census</a></li>";

		open(my $chtml, '>', "static-site/$filename.html");
		print $chtml "<html><head><title>The Family Tree $name - $census</title>",
			'</head>',
			"<body><center><h1>The Family Tree $name - $census</h1>";
		if($me) {
			print $chtml '[ <a href="', make_filename_from_person(person => $me), '">Home</a> ]';
		}
		print $chtml ' | [ <a href="surnames.html">Surnames Index</a> ]';
		if($opts{'w'}) {
			print $chtml ' | [ <a href="todo.html">Errors</a> ]';
		}
		if($gedcal) {
			print $chtml ' | [ <a href="calendar/index.html">Calendar</a> ]';
		}
		print $chtml ' | [ <a href="censuses.html">Census Index</a> ]',
			' | [ <a href="history.html">Family History</a> ]</center><br>',
			'<ul>';

		foreach my $name(sort keys %{$censuses{$census}}) {
			print $chtml '<li>',
				'<a href="', make_filename_from_person(person => $censuses{$census}->{$name}), '">',
				$name,
				'</a></li>';
			print $csv "$index!$census!", $censuses{$census}->{$name}->{'xref'}, "\n";
			$index++;
		}

		print $chtml '</ul></body></html>';
		close $chtml;
	}
	print $html '</ul></body></html>';
	close $html;
	close $csv;
}

print "Creating surname index\n";
open(my $html, '>', 'static-site/surnames.html');
print $html "<html><head><title>Surnames in the Family Tree $name</title>",
	"</head><body><center><h1>Surnames in the Family Tree $name</h1>";
if($me) {
	print $html '[ <a href="', make_filename_from_person(person => $me), '">Home</a> ]';
}
print $html ' | [ <a href="surnames.html">Surnames Index</a> ]',
	' | [ <a href="censuses.html">Census Index</a> ]',
	' | [ <a href="calendar/index.html">Calendar</a> ]';
if($opts{'w'}) {
	print $html ' | [ <a href="todo.html">Errors</a> ]';
}
print $html ' | [ <a href="history.html">Family History</a> ]</center><br><ul>';

open($csv, '>', 'dynamic-site/databases/surnames.csv');
print $csv "entry!surname!person\n";
$index = 1;

foreach my $surname(sort keys %{$surnames}) {
	my $filename = $surname;
	if($filename eq '') {
		$filename = 'UNKNOWN';
	}
	print $html "<li><a href=\"$filename.html\">$filename</a> (";
	my $count = scalar(keys %{$surnames->{$surname}});
	if($count == 1) {
		print $html '1 person';
	} else {
		print $html "$count people";
	}
	print $html ')</li>';

	open(my $shtml, '>', "static-site/$filename.html");
	print $shtml "<html><head><title>The Family Tree $name - $surname</title>",
		'</head>',
		"<body><center><h1>The Family Tree $name - $surname</h1>";
	if($me) {
		print $shtml '[ <a href="', make_filename_from_person(person => $me), '">Home</a> ]';
	}
	if($gedcal) {
		print $shtml ' | [ <a href="calendar/index.html">Calendar</a> ]';
	}
	print $shtml ' | [ <a href="surnames.html">Surnames Index</a> ]',
		' | [ <a href="history.html">Family History</a> ]';
	if($opts{'w'}) {
		print $shtml ' | [ <a href="todo.html">Errors</a> ]';
	}
	print $shtml ' | [ <a href="censuses.html">Census Index</a> ]</center><br>',
		'<ul>';

	foreach my $person(sort keys %{$surnames->{$surname}}) {
		# print "\t$person maps to ", $surnames->{$surname}->{$person}, "\n";
		print $shtml '<li>',
			'<a href="', make_filename_from_person(person => $surnames->{$surname}->{$person}), "\">$person</a>",
			'</li>';
		print $csv "$index!$filename!", $surnames->{$surname}->{$person}->{'xref'}, "\n";
		$index++;
	}

	print $shtml '</ul></body></html>';
	close $shtml;
}

close $csv;
print $html '</ul></body></html>';
close $html;

my $key = $opts{'g'};
if((!defined($key)) && defined($config)) {
	$key = $config->{'google_verification'};
}
if($key) {
	open($html, '>', "static-site/$key.html");
	print $html "google-site-verification: $key.html";
	close $html;
	if(-r "dynamic-site/$key.html") {
		unlink "dynamic-site/$key.html";
	}
	if($^O eq 'MSWin32') {
		copy("static-site/$key.html", "dynamic-site/$key.html");
	} else {
		link "static-site/$key.html", "dynamic-site/$key.html";
	}
}

if($gedcal) {
	print "Creating calendar\n";
	if(open(my $fout, '>', 'static-site/calendar/index.html')) {
		print $fout "<html><head><title>Genealogy Calendar $name</title></head>",
			"<body><center><h1>Genealogy Calendar $name</h1>";
		if($me) {
			print $fout '[ <a href="../', make_filename_from_person(person => $me), '">Home</a> ]';
		}
		print $fout ' | [ <a href="../surnames.html">Surnames Index</a> ]',
			' | [ <a href="../censuses.html">Census Index</a> ]';
		if($opts{'w'}) {
			print $fout ' | [ <a href="todo.html">Errors</a> ]';
		}
		print $fout ' | [ <a href="../history.html">Family History</a> ]</center><br><ul>';
		my $pr = String::ProgressBar->new(max => 12, length => 60);
		foreach my $month(1..12) {
			if(open(my $fin, '-|', "$gedcal -dHLm $month '$ARGV[0]'")) {
				$| = 1;
				$pr->update($month);
				$pr->write();
				$| = 0;
				print $fout "<li><a href=\"$month.html\">", @{$dtl->month_format_wide()}[$month - 1], '</a></li>';
				open(my $mout, '>', "static-site/calendar/$month.html");
				while(<$fin>) {
					print $mout $_;
				}
			}
		}
		print "\n";
		print $fout '</ul></body></html>';
	}
}

# TODO - this is a POC which seems to work
if(open(my $fout, '>', 'static-site/history.html')) {
	print "Creating family history page\n";
	print $fout "<html><head><title>Family History $name</title></head>",
		"<body><center><h1>Family History $name</h1>";
	if($me) {
		print $fout '[ <a href="', make_filename_from_person(person => $me), '">Home</a> ]';
	}
	print $fout ' | [ <a href="surnames.html">Surnames Index</a> ]',
		' | [ <a href="censuses.html">Census Index</a> ]';
	if($opts{'w'}) {
		print $fout ' | [ <a href="todo.html">Errors</a> ]';
	}
	print $fout ' | [ <a href="calendar/index.html">Calendar</a> ]</center><br>',
		'<ul>';
	my @sorted_events = Sort::Key::DateTime::dtkeysort { $all_events{$_}->{'date'} } keys %all_events;
	my $year;
	open(my $csv, '>', 'dynamic-site/databases/history.csv');
	print $csv "entry!year!month!day!person!title!event\n";
	my $index = 1;
	foreach my $e(@sorted_events) {
		$e = $all_events{$e};
		my $date = $e->{'date'};
		if(!(defined($year)) || ($date->year() != $year)) {
			$year = $date->year();
			if($year) {
				print $fout '</ul>';
			}
			print $fout "<h2>$year</h2><ul>";
		}
		my $person = $e->{'person'};
		my $string = $person->as_string();
		$string =~ s/'/\&apos;/g;
		print $fout '<li>', @{$dtl->month_format_wide()}[$date->month() - 1], ' ',
			$date->day(), ': <a href="',
			make_filename_from_person(person => $person), '">',
			$person->as_string(), '</a>: ', $e->{'event'}, '</li>';
		print $csv "$index!$year!",
			$date->month(), '!',
			$date->day(), '!',
			$person->{'xref'}, '!',
			"$string!",
			$e->{'event'}, "\n";
		$index++;
	}
	close $csv;
	print $fout '</ul></body></html>';
	close $fout;
}

sub print_person
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	# Gather the information on this person
	my $person = $params{'person'};

	$fetcher = Data::Fetch->new();	# Throw away old values from the cache

	my $dob = get_value({ person => $person, value => 'birth date' });

	# ACOM starts approximate dates with "Abt." instead of "ABT".
	if(defined($dob)) {
		$dob =~ s/[\.\-]/ /g;
		$dob =~ s/\s{2,}/ /g;
		$dob =~ s/\(.+$//;	# some people put information in brackets after the date
		if($dob =~ /^About[:\s](.+)/) {
			$dob = "ABT$1";
		} elsif($dob =~ /^Bet\s[a-z]{3}.+([a-z]{3}\s+.*)/i) {	# Bet Jun-Jul 1860
			$dob = "ABT $1";
		} elsif($dob =~ /^(.+)\s*\?/i) {
			$dob = "ABT$1";
		}
		if(($dob !~ /^[\d\sA-Z\/]+$/i) && ($dob !~ /^Abt\./)) {
			if($dob =~ /(\d{4})\s*(.+)/) {
				$dob = "ABT$1";
				if(place({ peron => $person, place => $2 })) {
					if($opts{'f'}) {
						die $person->as_string(), ": Unexpected text ($2) after the date $1 - should be in the location record";
					}
					red_warning({ person => $person, warning => "Unexpected text ($2) after the date $1 - should be in the location record" });
				} else {
					if($opts{'f'}) {
						die $person->as_string(), ": Unexpected text ($2) after the date $1 - should be in the note field";
					}
					red_warning({ person => $person, warning => "Unexpected text ($2) after the date $1 - should be in the note field" });
				}
			} elsif($dob !~ /\d{1,2}$/) {	# Dates can begin with a letter in the US
				if($opts{'f'}) {
					die $person->as_string(), ": Invalid character in date of birth $dob";
				}
				red_warning({ person => $person, warning => "Invalid character in date of birth $dob" });
				$dob = undef;
			}
		}
	}

	print 'Processing ', $person->as_string({ include_years => 1 }), "\n" if($opts{'v'});

	my @siblings = $person->siblings();
	my $mother = $person->mother();
	my $father = $person->father();
	my @spouses = $person->spouse();

	# TODO: Properly chart which spouse a child comes from
	# FIXME: This current algorithm misses children from all the marriages
	my $family;
	foreach my $f($person->fams()) {
		if($f->number_of_children()) {
			$family = $f;
			last;
		}
	}

	if($opts{'w'} && (!$family) && (scalar(@siblings) == 0) && (!$mother) && (!$father) && (scalar(@spouses) == 0)) {
		if($opts{'f'}) {
			die $person->as_string() . ': not connected to the tree';
		}
		red_warning({ person => $person, warning => 'not connected to the tree' });
	}

	my $year = (localtime)[5];
	$year += 1900 if($year < 1900);

	my $yob;	# Year of birth
	if($dob && ($dob =~ /.*?(\d{3,4})/)) {
		$yob = $1;
	} elsif($dob) {
		if($dob eq 'UNKNOWN') {
			$dob = undef;
		} elsif($opts{'w'} && !$warned{$person}) {
			if($opts{'f'}) {
				die $person->name(), ": invalid date of birth $dob\n";
			}
			warn $person->name(), ": invalid date of birth $dob\n";
			$warned{$person} = 1;
		}
	}

	my $death = $person->get_record('death');
	my $dateofdeath = get_value({ person => $person, value => 'death date' });
	if((!$dateofdeath) && $death) {
		$dateofdeath = $death->date();
	}

	my $yod;	# Year of death
	if($dateofdeath && ($dateofdeath =~ /.*?(\d{3,4})/)) {
		$yod = $1;
	}

	my $person2;
	if($ged2) {
		$person2 = $ged2->get_individual($person->as_string());
		if($opts{'w'}) {
			if(!defined($person2)) {
				if($opts{'f'}) {
					die $person->as_string() . ": not found in $ARGV[1]";
				}
				red_warning({
					person => $person,
					warning => "not found in $ARGV[1]"
				})
			}
		}
	}
	my $title = $person->as_string({
		include_years => 1,
		nee => 1,
		middle_names => 1,
		title => 1,
	});

	my $name = $person->name();
	$name =~ s/\///g;
	$nameparser->parse($name);
	my %name_components = $nameparser->components();
	my $firstname = $name_components{'given_name_1'};
	# my $surname = $name_components{'surname_2'} || $name_components{'surname_1'};
	my $surname = ucfirst(lc($person->surname())); # RT109786

	if($firstname && ($firstname =~ /\d/)) {
		if($opts{'f'}) {
			die $person->as_string(), ': First name contains a digit';
		}
		red_warning({ person => $person, warning => 'First name contains a digit' });
	}
	if($surname && ($surname =~ /\d/)) {
		if($opts{'f'}) {
			die $person->as_string(), ': Last name contains a digit';
		}
		red_warning({ person => $person, warning => 'Last name contains a digit' });
	}

	my $is_alive = is_alive(person => $person);
	if($is_alive && !$opts{'l'}) {
		$title = $firstname;
	}

	print "Starting output\n" if($opts{'v'});

	open(my $html, '>', 'static-site/' . make_filename_from_person(person => $person));
	my $xtitle = $title;
	$xtitle =~ s/&eacute;/&#233;/g;
	print $xml "\n\t\t<entry>", $person->{'xref'}, "</entry>\n\t\t<title>$xtitle</title>";
	print $csv $person->{'xref'}, '!',
		$person->as_string({ include_years => 1, middle_names => 1, title => 1 }), '!';

	if($me && ($person eq $me)) {
		my $name = $person->as_string(nee => 1);

		open(my $html, '>', 'static-site/index.html');
		print $html "<html><head><title>The Family Tree $name</title>",
			'<meta http-equiv="Refresh" content="1;URL=', make_filename_from_person(person => $person), '">';
		if(my $lang = $ENV{'LANG'}) {
			$lang =~ s/\.UTF-8//;
			$lang =~ tr/_/-/;
			$lang = lc($lang);
			print $html "<meta http-equiv=\"Content-Language\" content=\"$lang\">";
		}
		print $html '</head>',
			"<body><h1>The Family Tree $name</h1><a href=\"", make_filename_from_person(person => $person), "\">$name</a></body></html>";
		close $html;
		print $xml "\n\t<home>1</home>";
		print $csv '1!';
	} else {
		print $csv '0!';
	}

	if($opts{'m'}) {
		print $html "<html><head><title>$title</title></head><body onload=\"html_googlemaps_initialize()\"><center><h1>$title</h1>",
	} else {
		if($geolocation_key) {
			die "$0: -G makes no sense without -m";
		}
		print $html "<html><head><title>$title</title></head><body><center><h1>$title</h1>",
	}
	if(defined($me)) {
		print $html '[ <a href="', make_filename_from_person(person => $me), '">Home</a> ]';
	}
	if($gedcal) {
		print $html ' | [ <a href="calendar/index.html">Calendar</a> ]';
	}
	print $html ' | [ <a href="surnames.html">Surnames Index</a> ]',
		' | [ <a href="censuses.html">Census Index</a> ]';
	if($opts{'w'}) {
		print $html ' | [ <a href="todo.html">Errors</a> ]';
	}
	print $html ' | [ <a href="history.html">Family History</a> ]</center><p>';

	my $bio;
	my $fullbio;

	if($is_alive && !$opts{'l'}) {
		print $xml "\n\t\t<alive>1</alive>";
		print $csv '1!';
		$bio = '<i>This is the record of a living person, so not much data will be shown.</i></p><p>';
		print "Living person\n" if($opts{'v'});
	} else {
		print $csv '0!';
		$surnames->{$surname}->{$title} = $person;
	}

	my ($birth_dt, $marriage_dt, $death_dt);
	my $birth = $person->get_record('birth');
	my $dateofbirth = get_value({ person => $person, value => 'birth date' });
	if((!$dateofbirth) && $birth) {
		$dateofbirth = $birth->date();
	}

	my $placeofbirth = get_value({ person => $person, value => 'birth place' });
	if((!$placeofbirth) && $birth) {
		$placeofbirth = $birth->place();
	}

	my $placeofdeath = get_value({ person => $person, value => 'death place' });
	if((!$placeofdeath) && $death) {
		$placeofdeath = $death->place();
	}

	if($is_alive && ($placeofdeath || $dateofdeath)) {
		die "BUG: $title is marked as alive yet we have death information";
	}

	my %citations;
	my $citationcount = 0;
	my @birthcitations;
	my @deathcitations;
	if($opts{'c'}) {
		if($birth) {
			if($opts{'w'}) {
				foreach my $s($birth->source()) {
					if(!defined(get_source({ gedcom => $ged, person => $person, source => $s }))) {
						if($opts{'f'}) {
							die $person->as_string(), ': Citation is missing a source';
						}
						red_warning({ person => $person, warning => 'Citation is missing a source' });
					}
				}
			}
			my @s = sort { (get_source({ gedcom => $ged, person => $person, source => $a }) && get_source({ gedcom => $ged, person => $person, source => $b })) ? get_source({ gedcom => $ged, person => $person, source => $a })->title() cmp get_source({ gedcom => $ged, person => $person, source => $b })->title() : 0 } $birth->source();
			if(scalar(@s)) {
				my $previous;
				foreach my $src(@s) {
					# $src = $ged->get_source($src) unless ref($src);
					$src = get_source({ gedcom => $ged, person => $person, source => $src}) unless ref($src);
					if(defined($src) && (my $title = $src->title())) {
						if($previous && ($title eq $previous)) {
							next;
						}
						$previous = $title;
						push @birthcitations, ++$citationcount;
						$citations{$citationcount} = $src;
					}
				}
			} elsif($opts{'w'} && ($opts{'l'} || !$is_alive)) {
				if($dateofbirth) {
					red_warning({ person => $person, warning => "Birth date ($dateofbirth) has no citations" });
				} else {
					red_warning({ person => $person, warning => "Birth place ($placeofbirth) has no citations" });
				}
			}
		}
		if($death) {
			my @s = $death->source();
			if(scalar(@s)) {
				foreach my $src(@s) {
					$src = $ged->get_source($src) unless ref($src);
					my $seen;
					foreach my $bc(@birthcitations) {
						if($src eq $citations{$bc}) {
							push @deathcitations, $bc;
							$seen++;
							last;
						}
					}
					if(!$seen) {
						push @deathcitations, ++$citationcount;
						$citations{$citationcount} = $src;
					}
				}
			} elsif($opts{'w'} && ($opts{'l'} || !$is_alive)) {
				if($dateofdeath) {
					red_warning({ person => $person, warning => "Death date ($dateofdeath) has no citations" });
				} else {
					red_warning({ person => $person, warning => "Death place ($placeofdeath) has no citations" });
				}
			}
		}
	}

	# $fetcher->prime(object => $person, message => 'sex')->prime(object => $person, message => 'pronoun');

	my %place_records;

	my $baptism = $person->get_record('baptism');
	my $dateofbaptism = get_value({ person => $person, value => 'baptism date' });
	if((!$dateofbaptism) && $baptism) {
		$dateofbaptism = $baptism->date();
	}
	my $placeofbaptism = get_value({ person => $person, value => 'baptism place' });
	if((!$placeofbaptism) && $baptism) {
		$placeofbaptism = $baptism->place();
	}

	my @events = $person->event();

	my $marriage = $person->get_record('marriage') || $person->get_record('fams marriage');
	if((!defined($marriage)) && scalar(@spouses)) {
		$marriage = $spouses[0]->get_record('marriage');
		if((!defined($marriage)) && scalar(@spouses)) {
			if(scalar(@events) == 1) {
				my $event = $person->event();
				if(!ref($event)) {
					my $e = $person->tag_record('EVEN');
					if(ref($e) eq 'Gedcom::Record') {
						$event = $e;
					}
				}
				if(ref($event) eq 'Gedcom::Record') {
					my $type = $event->type();
					if($type eq 'Custom Marriage') {
						# FindMyPast
						$marriage = $event;
					}
				}
			} else {
				foreach my $event(@events) {
					if(ref($event) eq 'Gedcom::Record') {
						my $type = $event->type();
						if($type eq 'Custom Marriage') {
							# FindMyPast
							$marriage = $event;
							last;
						}
					}
				}
			}
		}
	}
	my $placeofmarriage = get_value({ person => $person, value => 'marriage place' });
	if((!$placeofmarriage) && $marriage) {
		$placeofmarriage = $marriage->place();
	}

	my $burial = $person->get_record('burial');
	my $dateofburial = get_value({ person => $person, value => 'burial date' });
	if((!$dateofburial) && $burial) {
		$dateofburial = $burial->date();
	}
	my $placeofburial = get_value({ person => $person, value => 'burial place' });
	if((!$placeofburial) && $burial) {
		$placeofburial = $burial->place();
	}

	if($is_alive && ($placeofburial || $dateofburial)) {
		die "BUG: $title is marked as alive yet we have burial information";
	}

	$birth_dt = date_to_datetime(date => $dateofbirth);

	my $dateofmarriage = get_value({ person => $person, value => 'marriage date' });
	if((!$dateofmarriage) && $marriage) {
		$dateofmarriage = $marriage->date();
	}
	$marriage_dt = date_to_datetime(date => $dateofmarriage);

	if($birth_dt && $marriage_dt && $opts{'w'} && ($marriage_dt < ($birth_dt + $sixteenyears))) {
		if($opts{'f'}) {
			die $person->as_string(),
				': married when less than 16 years old';
		}
		red_warning({
			person => $person,
			warning => 'married when less than 16 years old'
		});
	}
	$death_dt = date_to_datetime(date => $dateofdeath);

	if($opts{'l'} || !$is_alive) {
		# RT114091
		if($birth_dt && ($birth_dt >= $year_1000)) {
			$all_events{'B' . $person->{'xref'}} = { person => $person, event => 'Birth', date => $birth_dt };
		}
		if($marriage_dt && ($marriage_dt >= $year_1000)) {
			$all_events{'M' . $person->{'xref'}} = { person => $person, event => 'Marriage', date => $marriage_dt };
		}
		if($death_dt && ($death_dt >= $year_1000)) {
			$all_events{'D' . $person->{'xref'}} = { person => $person, event => 'Death', date => $death_dt };
		}
	}

	if($placeofbirth) {
		$place_records{'Birth'} = $birth;
	}
	if($placeofbaptism) {
		if($ENV{'LANG'} =~ /^en_US/) {
			$place_records{'Baptized'} = $baptism;
		} else {
			$place_records{'Baptised'} = $baptism;
		}
	}
	if($placeofmarriage) {
		$place_records{'Marriage'} = $marriage;
	}
	if($placeofdeath) {
		$place_records{'Death'} = $death;
	}
	if($placeofburial) {
		$place_records{'Burial'} = $burial;
	}

	my $marriagecitation;
	my @burialcitations;
	if($opts{'c'}) {
		if($marriage) {
			print "Check marriage source\n" if($opts{'v'});
			if(my $src = $marriage->source()) {
				$src = $ged->get_source($src) unless ref($src);
				# FIXME:  Only looks for matches in the first citations
				if(!defined($src)) {
					if($opts{'w'}) {
						my $src = $marriage->source();
						if($opts{'f'}) {
							die $person->as_string(), ": marriage citation can't find source $src";
						}
						red_warning({ person => $person, warning => "marriage citation can't find source $src" });
					}
				} elsif($birthcitations[0] && ($citations{$birthcitations[0]} eq $src)) {
					$marriagecitation = $birthcitations[0];
				} elsif($deathcitations[0] && ($citations{$deathcitations[0]} eq $src)) {
					$marriagecitation = $deathcitations[0];
				} else {
					$marriagecitation = ++$citationcount;
					$citations{$marriagecitation} = $src;
				}
			} elsif($opts{'w'} && ($opts{'l'} || !$is_alive)) {
				if($dateofmarriage) {
					red_warning({ person => $person, warning => "Marriage date ($dateofmarriage) has no citations" });
				} else {
					red_warning({ person => $person, warning => "Marriage place ($placeofmarriage) has no citations" });
				}
			}
		}
		if($burial) {
			print "Check burial source\n" if($opts{'v'});
			my @s = $burial->source();
			if(scalar(@s)) {
				foreach my $src(@s) {
					$src = $ged->get_source($src) unless ref($src);
					if(!defined($src)) {
						if($opts{'w'}) {
							my $src = $burial->source();
							if($opts{'f'}) {
								die $person->as_string(), ": burial citation can't find source $src";
							}
							red_warning({ person => $person, warning => "burial citation can't find source $src" });
						}
						next;
					}
					my $seen;
					foreach my $dc(@deathcitations) {
						if($src eq $citations{$dc}) {
							push @burialcitations, $dc;
							$seen++;
							last;
						}
					}
					if(!$seen) {
						if($marriagecitation && ($citations{$marriagecitation} eq $src)) {
							push @burialcitations, $marriagecitation;
						} else {
							push @burialcitations, ++$citationcount;
							$citations{$citationcount} = $src;
						}
					}
				}
			} elsif($opts{'w'} && ($opts{'l'} || !$is_alive)) {
				if($dateofburial) {
					red_warning({ person => $person, warning => "Burial date ($dateofburial) has no citations" });
				} else {
					red_warning({ person => $person, warning => "Burial place ($placeofburial) has no citations" });
				}
			}
		}
	}

	my $pronoun = $fetcher->get(object => $person, message => 'pronoun');
	my $sex = $fetcher->get(object => $person, message => 'sex');

	if($opts{'w'} && $firstname) {
		# FIXME: This throws up a number of false positives
		my $guess;
		if($placeofbirth && ($placeofbirth =~ /, USA$/)) {
			$guess = Text::Names::guessGender($firstname);
		} else {
			$guess = Text::Names::GB::guessGender($firstname);
		}
		if($sex && $guess && ($sex ne $guess)) {
			my $error = 1;
			if(my $middle_name = $name_components{'middle_name'}) {
				if($placeofbirth && ($placeofbirth =~ /, USA$/)) {
					$guess = Text::Names::guessGender($middle_name);
				} else {
					$guess = Text::Names::GB::guessGender($middle_name);
				}
				if($guess && ($sex eq $guess)) {
					$error = 0;
				}
			}
			if($error) {
				if($opts{'f'}) {
					die $person->name(), ': Check the gender of the record';
				}
				red_warning({ person => $person, warning => 'Check the gender of the record' });
			}
		}
	}
	my @occupations = $person->get_value('occupation');

	print 'Found ', scalar(@occupations), " occupation(s)\n" if($opts{'v'});

	my @children;
	foreach my $f($person->fams()) {
		@children = (@children, $f->children());
	}
	my $numberofchildren = scalar(@children);

	if($opts{'w'} && $numberofchildren) {
		foreach my $child(@children) {
			if($child eq $person) {
				if($opts{'f'}) {
					die $person->as_string(), ': person is own parent';
				} else {
					red_warning({ person => $person, warning => 'person is own parent' });
				}
			}
		}
	}

	print "numberofchildren = $numberofchildren\n" if($opts{'v'});

	my $relationship;
	my $spouserelationship;
	my $spouse;
	my %places_printed;

	if($dateofbirth && $opts{'w'} && scalar(@siblings)) {
		print 'Found ', scalar(@siblings), " siblings(s)\n" if($opts{'v'});
		foreach my $sibling(@siblings) {
			my $siblingbirth = get_value({ person => $sibling, value => 'birth date' });
			if($siblingbirth && ($siblingbirth eq $dateofbirth) &&
			  (($sibling->name() eq $person->name()) || Text::Names::samePerson($sibling->name(), $person->name()))) {
				if($opts{'f'}) {
					die $person->name(), ': Possible duplicate person';
				}
				red_warning({ person => $sibling, warning => 'possible duplicate person' });
			}
		}
	}

	if($me && ($person ne $me)) {
		print "find relationship\n" if($opts{'v'});
		$relationship = $me->relationship($person);
		if((!$relationship) && scalar(@spouses)) {
			print "find spousal relationship\n" if($opts{'v'});
			if($person->spouse() eq $me) {
				$relationship = ($sex eq 'F') ? 'wife' : 'husband';
			} else {
				foreach my $s(@spouses) {
					$spouserelationship = $me->relationship($s);
					if($spouserelationship) {
						$spouse = $s;
						last;
					}
				}
			}
		}
		print 'relationship = ', ($relationship ? $relationship : 'unknown'), "\n" if($opts{'v'});
	}

	while($occupations[0] && (lc($occupations[0]) =~ /^scho(ol|lar)/i)) {
		shift @occupations;
	}
	while(scalar(@occupations) > 1) {
		if(($occupations[0] =~ /labou?rer/i) && ($occupations[1] =~ /labou?rer/i)) {
			shift @occupations;
		} else {
			last;
		}
	}

	my $same_occupation_as_father;
	my $printed_comma = 0;

	if($occupations[0]) {
		if($father && $father->occupation() && ($occupations[0] eq $father->occupation())) {
			$same_occupation_as_father = $occupations[0];
			@occupations = ();
		} else {
			$bio = 'A';
			if($occupations[0] =~ /^works on (.+)/i) {
				$occupations[0] = "$1 worker";
			}
			if($occupations[0] =~ /^[aeiou]/i) {
				$bio .= 'n';
			}
			my $occupations = join(', ', @occupations);
			substr($occupations, rindex($occupations, ', '), 2, ' and ');
			$bio .= ' ';
			if($occupations[1]) {
				# my $alloccupations = join(', ', @occupations);
				# substr($alloccupations, rindex($alloccupations, ', '), 2, ' and ');
				# $bio .= HTML::Entities::encode(lc($alloccupations));
				$bio .= lc(Lingua::EN::Inflect::WORDLIST(@occupations, {final_sep => ''}));
			} else {
				$bio .= HTML::Entities::encode(lc($occupations[0]));
			}
			if(!($father || $mother || $spouserelationship)) {
				$bio .= ', ';
				$printed_comma = 1;
			}
		}
	} elsif(scalar(@occupations)) {
		if($opts{'w'}) {
			if($opts{'f'}) {
				die $person->as_string, ': occupation is empty';
			}
			red_warning({
				person => $person,
				warning => 'occupation is empty'
			});
		}
		shift @occupations;
	}

	my $print_sibling_count = 0;
	print $xml "\n\t\t<bio>";
	if($father || $mother) {
		if(scalar(@occupations)) {
			$bio .= ' and the ';
		} else {
			$bio = 'The ';
		}

		if($birth_dt && ($opts{'l'} || !$is_alive)) {
			if(scalar(@siblings)) {
				# If possible, sort siblings by date of birth
				my $all_siblings_have_dob = 1;
				foreach my $sibling(@siblings) {
					if(my $dob = get_value({ person => $sibling, value => 'birth date' })) {
						if(($dob !~ /^\d/) || ($dob =~ /[a-z]$/i) ||
						   ($dob =~ /[\/\-]/) || !date_parser_cached(date => $dob)) {
							$all_siblings_have_dob = 0;
							last;
						}
						if(!date_parser_cached(date => $dob)) {
							if($opts{'f'}) {
								die $sibling->as_string(),
									" has an invalid date of birth: $dob";
							}
							if($opts{'w'}) {
								red_warning({
									person => $sibling,
									warning => "has an invalid date of birth: $dob"
								});
							}
							$all_siblings_have_dob = 0;
							last;
						}
					} else {
						$all_siblings_have_dob = 0;
						last;
					}
				}
				if($all_siblings_have_dob) {
					@siblings = Sort::Key::DateTime::dtkeysort { $dfn->parse_datetime(@{$date_parser->parse(date => get_value({ person => $_, value => 'birth date' }))}[0]->{'canonical'}) } @siblings;
				}
				my $count = 1;
				$print_sibling_count = 1;
				foreach my $sibling(@siblings) {
					if(my $dob = get_value({ person => $sibling, value => 'birth date' })) {
						if(my $d = date_parser_cached(date => $dob)) {
							$d = $dfn->parse_datetime($d->{'canonical'});
							if($opts{'w'} &&
							  ($dob =~ /^\d/) && ($dob !~ /[a-z]$/i) &&
							  ($d < $birth_dt) &&
							  ($d < ($birth_dt - $oneday)) &&
							  ($d > ($birth_dt - $tenmonths))) {
								if($opts{'f'}) {
									die $sibling->as_string(),
										' was born less than 10 months before sibling ',
										$person->as_string();
								}
								red_warning({
									person => $sibling,
									warning => 'Born less than 10 months before sibling ' . $person->as_string()
								});
							}
							$count++ if($d && ($d < $birth_dt));
						} else {
							$all_siblings_have_dob = 0;
							last;
						}
					}
				}
				if($all_siblings_have_dob) {
					if(scalar(@siblings) && ($count == (scalar(@siblings) + 1))) {
						$bio .= ((scalar(@siblings) > 1) ? 'eldest' : 'older');
					} elsif(scalar(@siblings) && ($count == 1)) {
						$bio .= ((scalar(@siblings) > 1) ? 'youngest' : 'younger');
					} else {
						$bio .= ordinate($count);
					}
					$bio .= ' of ' . (scalar(@siblings) + 1) . ' children';
				} else {
					$bio .= 'child';
				}
			} else {
				# $bio .= ' only child of';
				$bio .= 'child';
			}
		} else {
			$bio .= 'child';
		}

		$bio .= ' of';

		print $html $bio;
		print $csv $bio;
		print $xml $bio;

		$fullbio = $bio;
		$bio = '';

		if($opts{'l'} || !$is_alive) {
			if($father) {
				print $html ' <a href="', make_filename_from_person(person => $father), '">',
					$father->as_string(),
					'</a>';
				print $xml ' &lt;a href="?page=people&amp;entry=', $father->{'xref'}, '"&gt;'.
					$father->as_string(),
					'$lt;/a$gt;';
				print $csv ' <a href="?page=people&entry=', $father->{'xref'}, '">'.
					$father->as_string(),
					'</a>';

				if(!$same_occupation_as_father) {
					my @occupations = $father->get_value('occupation');
					while($occupations[0] && (lc($occupations[0]) =~ /^scho(ol|lar)/i)) {
						shift @occupations;
					}
					# TODO: print all occupations
					if($occupations[0]) {
						print $html ' (a';
						print $csv ' (a';
						print $xml ' (a';
						if($occupations[0] =~ /^[aeiou]/i) {
							print $html 'n';
							print $csv 'n';
							print $xml 'n';
						}
						print $html ' ', HTML::Entities::encode(lc($occupations[0])), ')';
						print $csv ' ', HTML::Entities::encode(lc($occupations[0])), ')';
						print $xml ' ', HTML::Entities::encode(lc($occupations[0])), ')';
					}
				}
				$fullbio .= ' ' . $father->as_string();
				if($mother) {
					print $html ' and';
					print $csv ' and';
					print $xml ' and';
					$fullbio .= ' and';
				} else {
					print $html ', ';
					print $csv ', ';
					print $xml ', ';
					$fullbio .= ', ';
					$printed_comma = 1;
				}
			}
			if($mother) {
				if(my $m = $mother->as_string(give_maidenname => 0)) {
					print $html ' <a href="', make_filename_from_person(person => $mother), "\">$m</a>";
					print $csv ' <a href="?page=people&entry=', $mother->{'xref'}, "\">$m</a>";
					print $xml ' &lt;a href="?page=people&amp;entry=', $mother->{'xref'}, "\"&gt;$m&lt;/a&gt;";
				}

				my @occupations = $mother->get_value('occupation');
				# TODO: print $html all occupations
				if($occupations[0]) {
					print $html ' (a';
					print $csv ' (a';
					print $xml ' (a';
					if($occupations[0] =~ /^[aeiou]/i) {
						print $html 'n';
						print $csv 'n';
						print $xml 'n';
					}
					print $html ' ', lc($occupations[0]), ')';
					print $csv ' ', lc($occupations[0]), ')';
					print $xml ' ', lc($occupations[0]), ')';
				}
				$fullbio .= ' ' . $mother->as_string();
				if($opts{'w'}) {
					my $mdod = get_value({ person => $mother, value => 'death date' });
					if($mdod && $birth_dt) {
						if(my $dt = date_to_datetime(date => $mdod)) {
							if($birth_dt > $dt) {
								if($opts{'f'}) {
									die $person->name(), ': Born after mother died';
								}
								red_warning({ person => $person, warning => 'Born after mother died' });
							}
						}
					}
				}
			}
		} else {
			if($father) {
				print $html ' <a href="', make_filename_from_person(person => $father), '">',
					$father->given_names(),
					'</a>';
				print $csv ' <a href="?page=people&entry=', $father->{'xref'}, '">',
					$father->given_names(),
					'</a>';
				print $xml ' &lt;a href="?page=people&amp;entry=', $father->{'xref'}, '"&gt;',
					$father->given_names(),
					'&lt;/a&gt;';
				if($mother) {
					print $html ' and';
					print $csv ' and';
					print $xml ' and';
				}
			}
			if($mother) {
				print $html ' <a href="', make_filename_from_person(person => $mother), '">',
					$mother->given_names(),
					'</a>';
				print $csv ' <a href="?page=people&entry=', $mother->{'xref'}, '">',
					$mother->given_names(),
					'</a>';
				print $xml ' &lt;a href="?page=people&amp;entry=', $father->{'xref'}, '"&gt;',
					$mother->given_names(),
					'&lt;/a&gt;';
			}
		}
	}

	if($firstname) {
		if((!$is_alive) || $opts{'l'} || (!defined($me)) || ($person ne $me)) {
			if($opts{'l'} || $is_alive) {
				if($relationship) {
					$bio .= ', ' unless($printed_comma);
					$bio .= "<b>$firstname</b>";
					if(($dob || $marriage) && (!($is_alive || $opts{'l'}))) {
						$bio .= ',';
					} elsif($is_alive) {
						$bio .= ' is';
					} else {
						$bio .= ' was';
					}
				}
			} else {
				if($father || $mother || $occupations[0]) {
					$bio .= ', ' unless($printed_comma);
				}
				$bio .= "<b>$firstname " .
					$name_components{'surname_1'} .
					'</b>';
				if($relationship) {
					if($dateofbirth || $dateofbaptism || $placeofbirth || $placeofbaptism || scalar(@spouses)) {
						$bio .= ',';
					} elsif($opts{'l'} || $is_alive) {
						$bio .= ' is';
					} else {
						$bio .= ' was';
					}
				}
			}
		}
	} else {
		$bio .= $pronoun;
	}

	print $html $bio;
	print $csv $bio;
	print $xml HTML::Entities::encode($bio);

	$fullbio .= $bio;
	$bio = '';

	my $haveprintedspousename;
	if($relationship) {
		print $html " the $relationship of ",
			'<a href="', make_filename_from_person(person => $me), '">',
			$me->as_string(nee => 1),
			'</a>';
		print $csv " the $relationship of ",
			'<a href="?page=people&home=1">',
			$me->as_string(nee => 1),
			'</a>';
		print $xml " the $relationship of ",
			'&lt;a href="?page=people&amp;home=1"&gt;',
			$me->as_string(nee => 1),
			'&lt;/a&gt;';
	} elsif($spouserelationship) {
		if($sex eq 'F') {
			print $html ', the wife of';
			print $csv ', the wife of';
			print $xml ', the wife of';
		} else {
			print $html ', the husband of';
			print $csv ', the husband of';
			print $xml ', the husband of';
		}
		print $html ' <a href="', make_filename_from_person(person => $spouse), '">',
			$spouse->as_string({ middle_names => 1, title => 1 }),
			"</a> the $spouserelationship of ",
			'<a href="', make_filename_from_person(person => $me), '">',
			$me->as_string(nee => 1),
			'</a>';
		print $csv ' <a href="?page=people&entry=', $spouse->{'xref'}, '">',
			$spouse->as_string({ middle_names => 1, title => 1 }),
			"</a> the $spouserelationship of ",
			'<a href="?page=people&home=1">',
			$me->as_string(nee => 1),
			'</a>';
		print $xml ' &lt;a href="?page=people&amp;entry=', $spouse->{'xref'}, '"&gt;',
			$spouse->as_string({ middle_names => 1, title => 1 }),
			"&lt;/a&gt; the $spouserelationship of ",
			'&lt;a href="?page=people&amp;home=1"&gt;',
			$me->as_string(nee => 1),
			'&lt;/a&gt;';
		if($dateofbirth || $dateofbaptism || $placeofbirth || $placeofbaptism || $dateofmarriage) {
			print $html ',';
			print $csv ',';
			print $xml ',';
		}
		$haveprintedspousename = 1;
	}

	if(my $aka = $person->as_string({ use_aka => 1 })) {
		print $html " (also known as $aka)";
		print $csv " (also known as $aka)";
		print $xml " (also known as $aka)";
	}

	my $end_of_sentence = 0;

	my @childrenunknownparent;
	if($opts{'l'} || !$is_alive) {
		my $all_children_are_alive = 1;

		if($yob && ($year >= $yob + 150)) {
			$all_children_are_alive = 0;
		} else {
			foreach my $child(@children) {
				if(!is_alive(person => $child)) {
					$all_children_are_alive = 0;
					last;
				}
			}
		}

		if(($dateofbirth || $dateofbaptism || $placeofbirth || $placeofbaptism)) {
			if($dateofbirth || $placeofbirth) {
				# print $html ',' if($print_sibling_count && (!$opts{'a'}) && !$opts{'p'});

				$bio = ',' if($relationship);
				$bio .= ' was born';
				if($placeofbirth) {
					my $p = place({ person => $person, place => $placeofbirth });
					$bio .= $p;
					$places_printed{$p} = 1;
				}
				if($dateofbirth) {
					my $y = year({
						person => $person,
						date => $dateofbirth,
						must_predate => $death_dt
					});
					$bio .= " $y" if($y);
				}
				$bio .= cite(@birthcitations);
				if($dateofbaptism || $placeofbaptism) {
					if(scalar(@spouses) && ($numberofchildren > 0)) {
						$bio .= ', was';
					} else {
						$bio .= ' and';
					}
				}
				$end_of_sentence = 0;
			}
			if($opts{'w'}) {
				if($mother && $yob && (my $mumdateofbirth = get_value({ person => $mother, value => 'birth date' }))) {
					if($mumdateofbirth =~ /.*?(\d{3,4})/) {
						$mumdateofbirth = $1;
						if(($yob - $mumdateofbirth) <= 13) {
							if($opts{'f'}) {
								die "something is wrong with the date of birth which is less than 13 years after the mother was born ($mumdateofbirth)";
							}
							red_warning({
								person => $person,
								warning => "something is wrong with the date of birth which is less than 13 years after the mother was born ($mumdateofbirth)"
							});
						} elsif(($yob - $mumdateofbirth) >= 52) {
							if($opts{'f'}) {
								die "something is wrong with the date of birth which is more than 52 years after the mother was born ($mumdateofbirth)";
							}
							red_warning({
								person => $person,
								warning => "something is wrong with the date of birth which is more than 52 years after the mother was born ($mumdateofbirth)"
							});
						}
					}
				}
				if($father && $yob && (my $daddateofbirth = get_value({ person => $father, value => 'birth date' }))) {
					if($daddateofbirth =~ /.*?(\d{3,4})/) {
						$daddateofbirth = $1;
						if(($yob - $daddateofbirth) <= 13) {
							if($opts{'f'}) {
								die "something is wrong with the date of birth which is less than 13 years after the father was born ($daddateofbirth)";
							}
							red_warning({
								person => $person,
								warning => "something is wrong with the date of birth which is less than 13 years after the father was born ($daddateofbirth)"
							});
						}
					}
				}
				if($death_dt || ($dateofdeath && ($dateofdeath =~ /^\d{3,4}$/))) {
					my $yod;
					# TODO: Add more checking
					if($death_dt) {
						$yod = $death_dt->year();
					} elsif($dateofdeath =~ /^(\d{3,4})$/) {
						$yod = $1;
					} else {
						die "BUG: Impossible case";
					}
					foreach my $bc(@birthcitations) {
						my $citation = $citations{$bc};
						my $title = $citation->title();
						if($title =~ /^(\d{3,4})\s/) {
							if($1 > $yod) {
								if($opts{'f'}) {
									die $person->as_string(),
										": Year of citation of $title is after the death year of $yod"
								}
								red_warning({
									person => $person,
									warning => "Year of citation of $title is after the death year of $yod"
								});
							}
						}
					}
				}
			}
			if($dateofbaptism || $placeofbaptism) {
				$bio .= ' ';
				unless($dateofbirth || $placeofbirth) {
					if($numberofchildren == 0) {
						$bio .= 'and ';
					}
					$bio .= 'was ';
				}
				if($ENV{'LANG'} =~ /^en_US/) {
					$bio .= 'baptized';
				} else {
					$bio .= 'baptised';
				}
				if($placeofbaptism) {
					if($placeofbirth && ($placeofbaptism eq $placeofbirth)) {
						$bio .= ' there';
						if(my $address = $baptism->address()) {
							if($address =~ /(.+),\s*$placeofbirth$/) {
								$address = $1;
							}
							$bio .= " at $address";
						}
					} else {
						my $p = place({ person => $person, place => $placeofbaptism });
						$bio .= $p;
						$places_printed{$p} = 1;
					}
				}
				if($dateofbaptism) {
					if($opts{'w'} && $yob && ($dateofbaptism =~ /(\d{3,4})$/)) {
						# must_predate doesn't work when only years are known
						if($1 < $yob) {
							if($opts{'f'}) {
								die $person->as_string(), ": Year of baptism $1 is before the year of birth $yob";
							}
							red_warning({
								person => $person,
								warning => "Year of baptism $1 is before the year of birth $yob"
							});
						}
					}
					$bio .= ' ' . year({
						person => $person,
						date => $dateofbaptism,
						must_postdate => $birth_dt,
						must_predate => $death_dt
					}) . sibling_baptism_string({
						person => $person,
						siblings => \@siblings,
						date => $dateofbaptism,
						birthdate => $dateofbirth,
					});
				}
			} elsif($birth_dt) {
				my @twins;
				foreach my $s(@siblings) {
					if(my $dob = get_value({ person => $s, value => 'birth date' })) {
						if(($dob =~ /^\d/) && ($dob !~ /[a-z]$/i)) {
							my $d;
							eval {
								$d = $date_parser->parse(date => $dob);
							};
							if($d) {
								$d = @{$d}[0];
							}
							if($d) {
								$d = $dfn->parse_datetime($d->{'canonical'});
								if(($d == $birth_dt) || ($d == ($birth_dt - $oneday)) || ($d == ($birth_dt + $oneday))) {
									push @twins, { sibling => $s, dob => $d };
								}
							}
						}
					}
				}
				if(scalar(@twins) == 1) {	# TODO triplets and higher order
					my $t = pop(@twins);
					my $sibling = $t->{'sibling'};
					my $dob = $t->{'dob'};
					if($dob == $birth_dt) {
						$bio .= ', the same day as ';
					} elsif($dob == ($birth_dt + $oneday)) {
						$bio .= ', a day before ';
					} else {
						$bio .= ', a day after ';
					}
					$bio .= ($sex eq 'M' ? 'his' : 'her') . ' twin ' .
						(($sibling->sex() eq 'F') ? 'sister, ' : 'brother, ') .
						$sibling->given_names();
				}
			}

			if(scalar(@spouses) && ($numberofchildren > 0) && !$all_children_are_alive) {
				$bio .= ' and';
			} else {
				$bio .= '.';
				$end_of_sentence = 1;
			}
		} elsif($dateofbaptism || $placeofbaptism) {
			$bio .= " $pronoun was ";

			if($ENV{'LANG'} =~ /^en_US/) {
				$bio .= 'baptized';
			} else {
				$bio .= 'baptised';
			}
			if($placeofbaptism) {
				if($placeofbirth && ($placeofbaptism eq $placeofbirth)) {
					$bio .= ' there';
					if(my $address = $baptism->address()) {
						$bio .= " at $address";
					}
				} else {
					my $opts = {
						person => $person,
						place => $placeofbaptism,
						places_printed => \%places_printed
					};
					my $address = $baptism->address();
					if($address) {
						$opts{'address'} = $address;
					}
					my $p = place($opts);
					$bio .= $p;
					$places_printed{$p} = 1;
				}
			}
			if($dateofbaptism) {
				$bio .= ' ' . year({
					person => $person,
					date => $dateofbaptism,
					must_postdate => $birth_dt,
					must_predate => $death_dt
				}) . sibling_baptism_string({
					person => $person,
					siblings => \@siblings,
					date => $dateofbaptism,
					birthdate => $dateofbirth,
				});
			}
			if(scalar(@spouses)) {
				$bio .= ' and';
				$end_of_sentence = 0;
			} else {
				$bio .= '.';
				$end_of_sentence = 1;
			}
		}

		print "bio so far: $bio\n" if($opts{'v'});

		# TODO: children != 0 && spouses == 0
		if(scalar(@spouses) &&
		   ((!$spouserelationship) || $placeofmarriage || $dateofmarriage)) {
			$bio .= '<p>' . ucfirst($pronoun) if($end_of_sentence);

			if(scalar(@spouses) == 1) {
				if($placeofmarriage || $dateofmarriage) {
					$bio .= ' married ';
				} else {
					$bio .= ' was married to ';
				}
				if($haveprintedspousename) {
					$nameparser->parse($spouses[0]->name());

					my %name_components = $nameparser->components();
					$bio .= $name_components{'given_name_1'};
				} else {
					print $html $bio;
					print $csv $bio;
					$bio =~ s/&/&amp;/g;
					$bio =~ s/</&lt;/g;
					$bio =~ s/>/&gt;/g;
					$bio =~ s/&amp;amp;/&amp;/g;	# Because of the Encode entities
					print $xml $bio;

					$fullbio .= $bio . $spouses[0]->as_string();
					$bio = '';

					if($opts{'l'} || !$is_alive) {
						print $html '<a href="', make_filename_from_person(person => $spouses[0]), '">',
							$spouses[0]->as_string(),
							'</a>';
						print $csv '<a href="?page=people&entry=', $spouses[0]->{'xref'}, '">',
							$spouses[0]->as_string(),
							'</a>';
						print $xml '&lt;a href="?page=people&amp;entry=', $spouses[0]->{'xref'}, '"&gt;',
							$spouses[0]->as_string(),
							'&lt;/a&gt;';
					} else {
						print $html '<a href="', make_filename_from_person(person => $spouses[0]), '">',
							$spouses[0]->given_names(),
							'</a>';
						print $csv '<a href="?page=people&entry=', $spouses[0]->{'xref'}, '">',
							$spouses[0]->given_names(),
							'</a>';
						print $xml '&lt;a href="?page=people&amp;entry=', $spouses[0]->{'xref'}, '"&gt;',
							$spouses[0]->given_names(),
							'&lt;/a&gt;';
					}
					$haveprintedspousename = 1;
				}
				my $parentheses = 0;
				if($numberofchildren) {
					# if((!$placeofmarriage) && !$dateofmarriage) {
						# $bio .= ', ';
					# }
					if(my $soccupation = $spouses[0]->occupation()) {
						$bio .= ' (';
						$parentheses = 1;
						if(ref($soccupation) eq 'Gedcom::Record') {
							my @items = $soccupation->items();
							$soccupation = $items[0]->value();
						}
						if($soccupation =~ /^self-employed$/i) {
							$bio .= 'self-employed ';
						} else {
							$bio .= 'a';
							if($soccupation =~ /^[aeiou]/i) {
								$bio .= 'n';
							}
							$bio .= ' ' . lc($soccupation) . ' ';
						}
					}
					my @childrenofthisspouse;
					my $numberofchildrenwiththisspouse = $numberofchildren;
					my $spouse = $spouses[0];
					foreach my $child(@children) {
						if($sex eq 'F') {
							# Check through all possible fathers, since there could be a biologial and
							# and adoptive one listed
							# FIXME: this assumes that the spouse is the biological father, which is not
							#	a good assumption to make
							my @candidates = $child->father();
							my $father;
							foreach (@candidates) {
								if($_ eq $spouse) {
									$father = $_;
									last;
								}
							}
							if((!defined($father)) || ($father ne $spouse)) {
								push @childrenunknownparent, $child;
								$numberofchildrenwiththisspouse--;
							} else {
								push @childrenofthisspouse, $child;
							}
						} else {
							my $mother = $child->mother();
							if((!defined($mother)) || ($mother ne $spouse)) {
								push @childrenunknownparent, $child;
								$numberofchildrenwiththisspouse--;
							} else {
								push @childrenofthisspouse, $child;
							}
						}
					}
					if(scalar(@childrenunknownparent) < $numberofchildren) {
						if(!$parentheses) {
							$bio .= ' (';
							$parentheses = 1;
						}
						$bio .= 'with whom ' . lcfirst($pronoun);
						if((!$all_children_are_alive) || (!$opts{'l'}) || ($yob && ($year > $yob + 100))) {
							$bio .= ' had ';
						} elsif((!$dateofdeath) && (!$dateofburial) && ($spouses[0]) && !$spouses[0]->death()) {
							$bio .= ' has had ';
						} else {
							$bio .= $dateofdeath || $dateofburial ? ' had ' : ' has ';
						}

						if($numberofchildrenwiththisspouse == 1) {
							if($all_children_are_alive) {
								$bio .= '1 surviving child, ';
							} else {
								$bio .= '1 child, ';
							}
						} else {
							if($all_children_are_alive) {
								$bio .= "$numberofchildrenwiththisspouse surviving children: ";
							} else {
								$bio .= "$numberofchildrenwiththisspouse children: ";
							}
						}
						if($numberofchildrenwiththisspouse == 1) {
							$bio .= $children[0]->given_names();
						} elsif($numberofchildrenwiththisspouse > 1) {
							my $childnames = join(', ', map {
								'<a href="' . make_filename_from_person(person => $_) . '">'.
									$_->given_names() . '</a>'
							} @childrenofthisspouse);
							substr($childnames, rindex($childnames, ', '), 2, ' and ');
							print $html $childnames;
							$childnames = join(', ', map {
								'<a href="?page=people&entry=' . $_->{'xref'} . '">'.
									$_->given_names() . '</a>'
							} @childrenofthisspouse);
							substr($childnames, rindex($childnames, ', '), 2, ' and ');
							$bio .= $childnames;
						}
					}
				} else {
					my @spouse_occupations = $spouses[0]->get_value('occupation');
					if($spouse_occupations[0]) {
						$bio .= ' (a ' . HTML::Entities::encode(lc($spouse_occupations[0]));
						$parentheses = 1;
					}
				}
				if($opts{'l'} || !$is_alive) {
					if($parentheses) {
						$bio .= ')';
					} elsif(($dateofmarriage || $placeofmarriage) && $numberofchildren) {
						$bio .= ',';
					}
					if($placeofmarriage && $dateofmarriage &&
					   ($placeofbaptism and ($placeofmarriage eq $placeofbaptism))) {
						$bio .= ' there ' .
							year(person => $person, string => $dateofmarriage, must_postdate => $birth_dt, must_predate => $death_dt);
					} else {
						if($placeofmarriage) {
							my $args = {
								place => $placeofmarriage,
								person => $person,
								places_printed => \%places_printed
							};
							if($marriage && (my $address = $marriage->address())) {
								$args->{'address'} = $address;
							}
							my $p = place($args);
							$bio .= $p;
							$places_printed{$p} = 1;
						}
						$bio .= ' ' . year(person => $person, string => $dateofmarriage, must_postdate => $birth_dt, must_predate => $death_dt) if($dateofmarriage);
					}
					if($marriagecitation) {
						$bio .= cite(($marriagecitation));
					}
				}
			} elsif($opts{'l'} || !$is_alive) {
				$bio .= ' was married ';
				if(scalar(@spouses) == 2) {
					$bio .= 'twice';
				} else {
					$bio .= scalar(@spouses) . ' times';
				}

				$bio .= ', to';

				print $html $bio;
				print $csv $bio;
				$bio =~ s/</&lt;/g;
				$bio =~ s/>/&gt;/g;
				print $xml $bio;

				$fullbio .= $bio;
				$bio = '';

				my $all_marriages_have_date = 1;
				foreach my $spouse(@spouses) {
					my $date = get_value({ person => $spouse, value => 'marriage date' });
					if(!defined($date)) {
						if(my $marriage = ($spouse->get_record('marriage') || $spouse->get_record('fams marriage'))) {
							$date = $marriage->date();
						}
					}
					if(!date_to_datetime($date)) {
						$all_marriages_have_date = 0;
						last;
					}
				}
				if($all_marriages_have_date) {
					@spouses = Sort::Key::DateTime::dtkeysort {
						my $date;
						if(my $rec = $_->get_record('fams marriage')) {
							$date = $rec->date();
						}
						if((!defined($date)) && (my $rec = $_->get_record('marriage'))) {
							$date = $rec->date();
						}
						date_to_datetime(date => $date);
					} @spouses;
				}

				my $spousenumber = 0;
				my $previousplace;
				foreach my $spouse(@spouses) {
					print $html ' <a href="' . make_filename_from_person(person => $spouse) . '">' .
						$spouse->as_string() . '</a>';
					print $csv ' <a href="?page=people&entry=', $spouse->{'xref'}, '">',
						$spouse->as_string(),
						'</a>';
					print $xml ' &lt;a href="?page=people&amp;entry=', $spouse->{'xref'}, '"&gt;',
						$spouse->as_string(),
						'&lt;/a&gt;';

					my $dateofmarriage = get_value({ person => $spouse, value => 'marriage date' });
					if(!defined($dateofmarriage)) {
						if(my $marriage = ($spouse->get_record('marriage') || $spouse->get_record('fams marriage'))) {
							$dateofmarriage = $marriage->date();
						}
					}
					my $placeofmarriage = get_value({ person => $spouse, value => 'marriage place' });
					if(!defined($placeofmarriage)) {
						if(my $marriage = $spouse->get_record('marriage') || $spouse->get_record('fams marriage')) {
							$placeofmarriage = $marriage->place();
						}
					}
					if($placeofmarriage) {
						$placeofmarriage = place({ person => $spouse, place => $placeofmarriage, places_printed => \%places_printed });
						if($previousplace && ($placeofmarriage eq $previousplace)) {
							if($placeofmarriage =~ /^(.+?),/) {
								$placeofmarriage = " also$1";
							}
						} else {
							$previousplace = $placeofmarriage;
						}
					}

					if($dateofmarriage && $placeofmarriage) {
						$bio .= ' (' . year({ string => $dateofmarriage }) .
							"$placeofmarriage)";
					} elsif($placeofmarriage) {
						$bio .= " ($placeofmarriage)";
					} elsif($dateofmarriage) {
						$bio .= ' (' . year({ string => $dateofmarriage }) . ')';
					}
					$spousenumber++;
					if($spousenumber == (scalar(@spouses) - 1)) {
						$bio .= ' and';
					} elsif($spousenumber < (scalar(@spouses) - 1)) {
						$bio .= ',';
					}
					print $html $bio;
					print $csv $bio;
					print $xml $bio;

					$fullbio .= $bio;
					$bio = '';
				}
				# substr($names, rindex($names, ', '), 2, ' and ');
				$bio = cite(($marriagecitation));

				# Determine if all the children are from one marriage, since that's
				# easier to print.
				# FIXME:  handle where offspring are from more than one marriage
				if($numberofchildren) {
					my %childrenbyspouse;
					my $childrenseen = 0;
					my $unknown;
					foreach my $family ($person->fams()) {
						if($family->number_of_children() &&
						   ($spouse = ($sex eq 'M') ? $family->wife() : $family->husband())) {
							my $spouse = ($sex eq 'M') ? $family->wife() : $family->husband();
							foreach my $child($person->children()) {
								$unknown = $child;
								foreach my $spouseschild($spouse->children()) {
									if($spouseschild eq $child) {
										$childrenbyspouse{$spouse}++;
										$childrenseen++;
										$unknown = undef;
										last;
									}
								}
							}
						}
					}
					my $parentofall;
					if($childrenseen < $numberofchildren) {
						# Unable to find the parent of all of the children.  This
						# may be the case where someone married more than once,
						# and has a child by a 3rd unknown (or unfound) person
						if($opts{'w'}) {
							if($opts{'f'}) {
								die $person->as_string() . ': one of the parents of ' . ($numberofchildren - $childrenseen) . ' children is not known';
							}
							if(($numberofchildren - $childrenseen) == 1) {
								if($unknown) {
									red_warning({ person => $person, warning => 'One of the parents of ' . $unknown->as_string() . ' is not known'});
								} else {
									red_warning({ person => $person, warning => 'One of the parents of 1 child is not known'});
								}
							} else {
								red_warning({ person => $person, warning => 'One of the parents of ' . ($numberofchildren - $childrenseen) . ' children is not known'});
							}
						}
					} else {
						foreach my $spouse(@spouses) {
							if($parentofall && $childrenbyspouse{$spouse}) {
								$parentofall = undef;
								last;
							}
							if($childrenbyspouse{$spouse}) {
								$parentofall = $spouse;
							}
						}
					}
					$bio .= ". $pronoun " .
						($all_children_are_alive ? 'has ' : 'had ');
					if($numberofchildren == 1) {
						if($all_children_are_alive) {
							$bio .= '1 surviving child';
						} else {
							$bio .= '1 child';
						}
						if($childrenseen >= $numberofchildren) {
							if($parentofall) {
								$bio .= ' with ' . $parentofall->as_string();
							} else {
								if($opts{'f'}) {
									die $person->as_string(), ': BUG: parentofall not set when only one child';
								} else {
									red_warning({ person => $person, warning => 'BUG: parentofall not set when only one child' });
								}
							}
						} else {
							$bio .= ' with an unknown ' . (($sex eq 'M') ? 'mother' : 'father');
						}
						# TODO: make hyperlink to the persons record, unless surviving
						$bio .= ', ' . $children[0]->given_names();
					} else {
						if($all_children_are_alive) {
							$bio .= "$numberofchildren surviving children";
						} else {
							$bio .= "$numberofchildren children";
						}
						# FIXME: do hyperlinks - needs to be correct for $csv and $html
						my $childnames;
						if($parentofall) {
							if($numberofchildren == 2) {
								$bio .= ', both with ' . $parentofall->as_string();
							} else {
								$bio .= ', all with ' . $parentofall->as_string();
							}
							# TODO: only add hyperlink to dead children
							# $childnames = join(', ', map {
								# '<a href="' . make_filename_from_person(person => $_) . '">' .
									# $_->given_names() . '</a>'
							# } @children);
							$childnames = join(', ', map { $_->given_names() } @children);
						} elsif($sex eq 'M') {
							# $childnames = join(', ', map {
								# my $mother = $_->mother();
								# '<a href="' . make_filename_from_person(person => $_) . '">' .
									# $_->given_names() . '</a>' .
								# ' (with ' .
								# '<a href="' . make_filename_from_person(person => $mother) . '">' .
									# $mother->given_names() . '</a>' .
								# ')'
							# } @children);
							$childnames = join(', ', map { $_->given_names() } @children);
						} else {
							# $childnames = join(', ', map {
								# my $father = $_->father();
								# '<a href="' . make_filename_from_person(person => $_) . '">' .
									# $_->given_names() . '</a>' .
								# ' (with ' .
								# '<a href="' . make_filename_from_person(person => $father) . '">' .
									# $father->given_names() . '</a>' .
								# ')'
							# } @children);
							$childnames = join(', ', map { $_->given_names() } @children);
						}
						substr($childnames, rindex($childnames, ', '), 2, ' and ');
						$bio .= ": $childnames";
					}
				}
			}
			$end_of_sentence = 0;
		} elsif($numberofchildren) {
			if($end_of_sentence) {
				$bio .= " $pronoun";
			}
			$bio .= ' had ' .
				(($numberofchildren == 1) ? '1 child, ' : "$numberofchildren children, ");
			if($numberofchildren == 1) {
				$bio .= $children[0]->given_names();
			} else {
				my $childnames = join(', ', map { $_->given_names() } @children);
				substr($childnames, rindex($childnames, ', '), 2, ' and ');
				$bio .= $childnames;
			}
			$end_of_sentence = 0;
		}
	}

	my $printed_residence = 0;
	my %citationnotes;
	my @residences = $person->residence();
	my @note_locations;

	if($opts{'l'} || !$is_alive) {
		if(scalar(@childrenunknownparent)) {
			$bio .= '. ' if(!$end_of_sentence);
			$bio .= "$pronoun ";
			if(scalar(@children) > scalar(@childrenunknownparent)) {
				$bio .= 'also ';
			}
			$bio .= 'had ' . scalar(@childrenunknownparent) . ' ';
			if(scalar(@childrenunknownparent) == 1) {
				$bio .= 'child, ';
			} else {
				$bio .= 'children, ';
			}
			$bio .= Lingua::EN::Inflect::WORDLIST((map { $_->given_names() } @childrenunknownparent), {final_sep => ''}) .
				', whose ' .
				(($sex eq 'F') ? 'father' : 'mother') .
				' is unknown';
			$end_of_sentence = 0;
		}

		if($same_occupation_as_father) {
			$bio .= '.' if(!$end_of_sentence);
			$bio .= ' Like his father, ' . lcfirst($pronoun) .
				(is_alive(person => $person) ? ' is a' : ' was a');
			if($same_occupation_as_father =~ /^[aeiou]/i) {
				$bio .= 'n';
			}
			$bio .= ' ' . lc($same_occupation_as_father) . '. ';
			$end_of_sentence = 1;
		}

		print "Handling residences\n" if($opts{'v'});
		# FMP stores Censuses as events
		my $index = 0;
		foreach my $event(@events) {
			$index++;
			if(!ref($event)) {
				my $e = $person->tag_record('EVEN', $index);
				if(ref($e) eq 'Gedcom::Record') {
					$event = $e;
				} else {
					red_warning({ person => $person, warning => "Event record is just description ($event), infomation has been lost" });
				}
			}
			if(ref($event) eq 'Gedcom::Record') {
				my $type = $event->type();
				if(!defined($type)) {
					red_warning({ person => $person, warning => "Can't determine type of event, or the event type is empty" });
					next;
				}

				if(($type =~ /^Census U[KS] (\d{4})$/) || ($type eq 'Register UK 1939')) {
					my $newresidence = 1;
					foreach my $residence(@residences) {
						if(!ref($residence)) {
							my $r = $person->tag_record('EVEN', $index);
							if(ref($r) eq 'Gedcom::Record') {
								$residence = $r;
							} else {
								$r = $person->record(['residence', $index]);
								if(ref($r) eq 'Gedcom::Record') {
									$residence = $r;
								} else {
									next;	# Will warn below
								}
							}
						}
						if((ref($residence) eq 'Gedcom::Record') &&
						  $residence->date() &&
						  $event->date() &&
						  $residence->date() eq $event->date()) {
							$newresidence = 0;
							last;
						}
					}
					if(!$dateofbirth) {
						if($opts{'f'}) {
							die $person->as_string(), ': census information not used to approximate a date of birth';
						}
						red_warning({ person => $person, warning => 'Census information not used to approximate a date of birth' });
					}
					push @residences, $event if($newresidence);
				} elsif($type eq 'Hospitalisation') {	# Find My Past
					push @residences, $event;
				}
			}
		}

		if(scalar(@residences)) {
			# FIXME, handle duplicate locations better
			my @residencelist;
			my %residencecitations;

			# This is an attempt to handle
			# https://github.com/pjcj/Gedcom.pm/issues/13
			my $index = 0;
			foreach my $residence(@residences) {
				$index++;
				if(!ref($residence)) {
					my $r = $person->tag_record('EVEN', $index);
					if(ref($r) eq 'Gedcom::Record') {
						$residence = $r;
					} else {
						$r = $person->record(['residence', $index]);
						if(ref($r) eq 'Gedcom::Record') {
							$residence = $r;
						} else {
							red_warning({ person => $person, warning => "Residence record is just description ($residence), infomation has been lost" });
						}
					}
				}
				if(ref($residence) eq 'Gedcom::Record') {
					my $place = $residence->place();
					if(my $address = $residence->address()) {
						if(ref($address) eq 'Gedcom::Record') {
							$place = getaddress($address);
						} elsif($place) {
							$place = "$address, $place";
						} elsif($opts{'f'}) {
							die $person->string(), ": address set to $address but place is empty";
						} else {
							red_warning({
								person => $person,
								warning => "Address set to $address but place is empty"
							});
						}
					}
					if(defined($place)) {
						if(my $dor = $residence->date()) {
							if($placeofbirth && $dob && ($dor eq $dob)) {
								next;
							}
							if($placeofmarriage && $dateofmarriage && ($dor eq $dateofmarriage)) {
								next;
							}
						}
						push @residencelist, $residence;
						if(my $src = $residence->source()) {
							$src = get_source({ gedcom => $ged, person => $person, source => $src}) unless ref($src);
							my $note = notes(record => $residence, note_locations => \@note_locations);
							foreach my $c(@birthcitations) {
								if($src eq $citations{$c}) {
									$residencecitations{$residence} = $c;
									if($note) {
										$citationnotes{$c} = $note;
									}
									last;
								}
							}
							unless($residencecitations{$residence}) {
								if($deathcitations[0] && ($src eq $citations{$deathcitations[0]})) {
									$residencecitations{$residence} = $deathcitations[0];
									if($note) {
										$citationnotes{$deathcitations[0]} = $note;
									}
								} else {
									$residencecitations{$residence} = ++$citationcount;
									$citations{$citationcount} = $src;
									if($note) {
										$citationnotes{$citationcount} = $note;
									}
								}
							}
						}
					} elsif(my $dor = $residence->date()) {
						if(my $type = $residence->type()) {
							if($type ne 'Military service') {
								red_warning({ person => $person, warning => "Residence record for $dor contains no location" });
							}
						}
					} else {
						red_warning({ person => $person, warning => 'Residence record contains no location' });
					}
				}
			}

			# TODO: See RT110333

			# Sort residences chronologically
			# FIXME: This messes citations
			my $all_residences_have_date = 1;
			foreach my $residence(@residencelist) {
				my $date = $residence->date();
				if(!$date) {
					if($opts{'f'}) {
						die $person->name(), ': Contains a residence without a date';
					}
					red_warning({ person => $person, warning => 'Contains a residence' . place(record => $residence) . ' without a date' });
					$all_residences_have_date = 0;
					last;
				}
				$date = $date_parser->parse(date => $date);
				if(!defined($date)) {
					if($opts{'f'}) {
						die $person->name(), ": Can't parse date '$date'";
					}
					red_warning({ person => $person, warning => "Can't parse date '$date'" });
					$all_residences_have_date = 0;
					last;
				}
				if(scalar(@{$date}) == 0) {
					# e.g. "Apr/May/Jun 2016"
					$all_residences_have_date = 0;
					last;
				}
			}
			if($all_residences_have_date) {
				@residencelist = Sort::Key::DateTime::dtkeysort { $dfn->parse_datetime(@{$date_parser->parse(date => $_->date())}[0]->{'canonical'}) } @residencelist;
			}
			my $count = 0;
			my $have_printed = 0;
			my $prev_date;
			my $spdeath_dt;
			if($spouses[0]) {
				$spdeath_dt = date_to_datetime(date => get_value({ person => $spouses[0], value => 'death date' }));
			}
			my $print_year_only;
			my $yod;
			my $dod = get_value({ person => $person, value => 'death date' });
			if($dod && ($dod =~ /.*?(\d{3,4})/)) {
				$yod = $1;
			}
			foreach my $residence(@residencelist) {
				my $rdate = $residence->date();
				if(($count == 0) || !places_are_the_same({ person => $person, first => $residence, second => $residencelist[$count - 1] })) {
					if($birth && $dob && $rdate && ($rdate eq $dob) &&
					   places_are_the_same({ person => $person, first => $birth, second => $residence})) {
						# This residence record is for the place of birth, which is
						# printed elsewhere
						$place_records{"Residence/$count"} = $residence;
						$count++;
						next;
					}
					if(!$have_printed) {
						$bio .= '.' unless($end_of_sentence);
						if((scalar(@residencelist) == 1) && $rdate) {
							$bio .= ' ' . ucfirst(year({ person => $person, date => $rdate, circa => 'About' })) .
								', ' . lcfirst($pronoun) . ' was living';
						} else {
							$bio .= '<p>During ' .
								lc($person->possessive()) .
								' life, ' . lcfirst($pronoun) . ' was living';
						}
						$have_printed = 1;
					}
					if($birth && places_are_the_same({ person => $person, first => $birth, second => $residence})) {
						$bio .= ' at ' . ($person->pronoun() eq 'She' ? 'her' : 'his') . ' birthplace';
					} else {
						my $p = place({
							person => $person,
							record => $residence,
							must_predate => $death_dt,
							places_printed => \%places_printed
						});
						if($residence->type() && ($residence->type() eq 'Hospitalisation')) {
							$bio .= ' in hospital';
						}
						$places_printed{$p} = 1;
						$bio .= HTML::Entities::encode($p);
						$places_printed{$p} = 1;
					}
					$place_records{"Residence/$count"} = $residence;
				}
				if($rdate) {	# residence has a date?
					if($opts{'w'} && ($rdate =~ /(\d{3,4})$/)) {
						my $yoe = $1;
						if($yod) {
							if($yoe > $yod) {
								if($opts{'f'}) {
									die $person->as_string(), ": Year of residence $yoe is after the year of death $yod";
								}
								red_warning({
									person => $person,
									warning => "Year of residence $yoe is after the year of death $yod"
								});
							} elsif($death_dt && (my $rdate_dt = date_to_datetime($rdate))) {
								if($rdate_dt > $death_dt) {
									if($opts{'f'}) {
										die $person->as_string(), ": Date of residence $rdate is after date of death ", $death_dt->strftime('x');
									}
									red_warning({
										person => $person,
										warning => "Date of residence $rdate is after date of death " . $death_dt->strftime('x')
									});
								}
							}
						}
						if($yob && (($yoe - $yob) <= 10)) {
							my $found_parent = 0;
							if($mother) {
								my @mr = $mother->residence();
								my @me = $mother->event();
								my $index = 0;
								foreach my $event(@me) {
									$index++;
									if(!ref($event)) {
										my $e = $mother->tag_record('EVEN', $index);
										if(ref($e) eq 'Gedcom::Record') {
											$event = $e;
										} else {
											next;
										}
									}
									if(ref($event) eq 'Gedcom::Record') {
										my $type = $event->type();
										if(!defined($type)) {
											next;
										}

										if(($type =~ /^Census U[KS] (\d{4})$/) || ($type eq 'Register UK 1939')) {
											push @mr, $event;
										}
									}
								}
								$index = 0;
								foreach my $residence(@mr) {
									$index++;
									if(ref($residence) ne 'Gedcom::Record') {
										$residence = $person->record(['residence', $index]);
									}
									if(ref($residence) eq 'Gedcom::Record') {
										my $date = $residence->date();
										if(defined($date) && ($date =~ /(\d{3,4})$/)) {
											if($1 == $yoe) {
												$found_parent = $residence;
												last;
											}
										}
									}
								}
							}
							if($father && !$found_parent) {
								my @fr = $father->residence();
								my @fe = $father->event();
								my $index = 0;
								foreach my $event(@fe) {
									$index++;
									if(!ref($event)) {
										my $e = $father->tag_record('EVEN', $index);
										if(ref($e) eq 'Gedcom::Record') {
											$event = $e;
										} else {
											next;
										}
									}
									if(ref($event) eq 'Gedcom::Record') {
										my $type = $event->type();
										if(!defined($type)) {
											next;
										}

										if(($type =~ /^Census U[KS] (\d{4})$/) || ($type eq 'Register UK 1939')) {
											push @fr, $event;
										}
									}
								}
								$index = 0;
								foreach my $residence(@fr) {
									$index++;
									if(ref($residence) ne 'Gedcom::Record') {
										$residence = $person->record(['residence', $index]);
									}
									if(ref($residence) eq 'Gedcom::Record') {
										my $date = $residence->date();
										if($date =~ /(\d{3,4})$/) {
											if($1 == $yoe) {
												$found_parent = $residence;
												last;
											}
										}
									}
								}
							}
							if(($father || $mother) && !$found_parent) {
								# FIXME: both parents could be dead
								if($opts{'f'}) {
									die $person->name(), "Residence information in $yoe, but no residence information found for either parent";
								}
								red_warning({ person => $person, warning => "Residence information in $yoe, but no residence information found for either parent" });
							}	# TODO: else warn if both parents locations are different
						}
					}
					if(scalar(@residencelist) > 1) {
						my $this_date = year({ person => $person, date => $rdate });
						if($prev_date && ($prev_date eq $this_date)) {
							if($opts{'f'}) {
								die $person->name(), "Two residence records for $rdate";
							}
							red_warning({ person => $person, warning => "Two residence records for $rdate" });
						}
						if($print_year_only) {
							if($count == (scalar(@residencelist) - 1)) {
								$bio .= $rdate;
								# $print_year_only = 0;
							}
						} else {
							$bio .= " $this_date";
						}
						$prev_date = $this_date;
					}
					# Find if they are an adult living with an adult sibling
					if(scalar(@siblings) && $birth_dt && $residence->address()) {
						my $diff = $dfn->parse_datetime($rdate) - $birth_dt;
						if($diff->in_units('years') >= 40) {
							# Safe to assume both are adults at this time
							foreach my $sibling(@siblings) {
								my @srs = $sibling->residence();
								foreach my $sr(@srs) {
									if((ref($sr) eq 'Gedcom::Record') &&
									   $sr->date() && ($sr->date() eq $rdate) &&
									   places_are_the_same({ person => $sibling, first => $residence, second => $sr })) {
										$bio .= ' when ' .
											lcfirst($person->pronoun()) .
											' was living with ' .
											lcfirst($person->possessive()) .
											(($sibling->sex() eq 'F') ? ' sister, ' : ' brother, ') .
											'<a href="' . make_filename_from_person(person => $sibling) . '">' .
												$sibling->given_names() .
											'</a>';
									}
								}
							}
						}
					}
					if($spdeath_dt && (my $rdate_dt = date_to_datetime($rdate))) {
						if($rdate_dt > $spdeath_dt) {
							$bio .= ' following the death of ' .
								($person->pronoun() eq 'She' ? 'her' : 'his') .
								(($sex eq 'M') ? ' wife ' : ' husband ') .
								year(date => get_value({ person => $spouses[0], value => 'death date' }));
							$spdeath_dt = undef;
						}
					}
					if($spdeath_dt && (my $rdate_dt = date_to_datetime($rdate))) {
						if($rdate_dt > $spdeath_dt) {
							# Living with a child following death of spouse?
							CHILD: foreach my $child(@children) {
								my @cevents = $child->event();
								my $index = 0;
								EVENT: foreach my $event(@cevents) {
									$index++;
									if(!ref($event)) {
										my $e = $child->tag_record('EVEN', $index);
										if(ref($e) eq 'Gedcom::Record') {
											$event = $e;
										} else {
											# red_warning({ person => $child, warning => "Event record is just description ($event), infomation has been lost" });
											next EVENT;
										}
									}
									my $type = $event->type();

									if(($type !~ /^Census U[KS] (\d{4})$/) && ($type ne 'Register UK 1939')) {
										next EVENT;
									}
									if((ref($event) eq 'Gedcom::Record') &&
									   $event->date() && ($event->date() eq $rdate) &&
									   places_are_the_same({ person => $child, first => $residence, second => $event })) {
										$bio .= ' when ' . lcfirst($person->pronoun()) .
											' was living with ' .
											lcfirst($person->possessive()) .
											(($child->sex() eq 'F') ? ' daughter ' : ' son ') .
											$child->given_names() .
											' following the death of ' .
											($sex eq 'M') ? 'his wife ' : 'her husband ' .
											year(date => get_value({ person => $spouses[0], value => 'death date' }));
										$spdeath_dt = undef;
										last CHILD;
									}
								}
							}
						}
					}
				}
				# Citation residence notes print later
				if((!($opts{'c'} && $residence->source())) && (my $notes = notes({ record => $residence, note_locations => \@note_locations }))) {
					$notes =~ s/\.$//;
					$notes = lcfirst($notes);
					$bio .= " ($notes)";
				} elsif($opts{'c'}) {
					my $incitation = 0;
					if($residencecitations{$residence}) {
						my $citation = $residencecitations{$residence};
						$bio .= "<span class=\"citation\">$citation";
						$incitation = 1;
					}
					if($residence->place() &&
					  (!$rdate) &&
					  ($count <= (scalar(@residencelist) - 1)) &&
					  ($residencecitations{$residence})) {
						my $peek = $residencelist[$count + 1];
						if($peek && places_are_the_same({ person => $person, first => $residence, second => $peek })) {
							if($residencecitations{$peek}) {
								my $citation = $residencecitations{$peek};
								if($incitation) {
									$bio .= ',';
								} else {
									$bio .= "<span class=\"citation\">";
								}
								$bio .= $citation;
								$incitation = 1;
							}
						}
					}
					$bio .= '</span>' if($incitation);
				}
				$count++;
				if(($count == 1) && (scalar(@residencelist) == 2)) {
					if($print_year_only) {
						$bio .= $rdate;
						$print_year_only = 0;
					}
					$bio .= ' and';
				} else {
					my $peek = $residencelist[$count];
					if($peek && places_are_the_same({ person => $person, first => $residence, second => $peek })) {
						$peek = $residencelist[$count + 1];
						if($peek && places_are_the_same({ person => $person, first => $residence, second => $peek })) {
							# Don't do the print_year_only code (which condenses "in 1841, in 1842 and in 1843"
							# to "in 1841-1842") when citations are enabled since each year will likely have
							# a separate citation
							if((!$opts{'c'}) && $rdate && ($rdate =~ /^\d{4}$/) && $peek->date() && ($peek->date() =~ /^\d{4}$/)) {
								if(!$print_year_only) {
									$bio .= '-';
									$print_year_only = 1;
								}
							} else {
								if($print_year_only && $rdate) {
									$bio .= $rdate;
									$print_year_only = 0;
								}
								$bio .= ',';
							}
						} elsif(!$print_year_only) {
							$bio .= ' and';
						}
					} elsif($count == (scalar(@residencelist) - 1)) {
						if($print_year_only) {
							$bio .= $rdate;
							$print_year_only = 0;
						}
						$bio .= '; and';
					} elsif($count < (scalar(@residencelist) - 1)) {
						if($print_year_only) {
							$bio .= $rdate;
							$print_year_only = 0;
						}
						$bio .= ';';
					}
				}
				$printed_residence = 1;
			}
			if($printed_residence) {
				$bio .= '.';
				$end_of_sentence = 1;
			}
		}
	} else {
		print $csv '.!!!';
		print $xml '.';
	}

	if($placeofburial || $dateofburial) {
		if((!$dateofdeath) && !$placeofdeath) {
			$bio .= '.' if((!$end_of_sentence) && (scalar(@spouses) || $numberofchildren));
			if($dateofburial) {
				$bio .= " $pronoun was buried " .
					year({ person => $person, date => $dateofburial });
				if($placeofburial) {
					if($placeofbirth && ($placeofburial eq $placeofbirth)) {
						$bio .= ' in ' .
							lcfirst($person->possessive()) .
							' home town of ';
						my $city = $placeofburial;
						if($city =~ /^(.+?),/) {
							$bio .= $1;
						} else {
							my $opts = {
								person => $person,
								place => $placeofburial,
								there => $placeofdeath,
								places_printed => \%places_printed,
								must_postdate => $birth_dt
							};
							if(my $address = $burial->address()) {
								$opts->{'address'} = $address;
							}
							$bio .= place($opts);
						}
					} else {
						$bio .= place({ person => $person, place => $placeofburial, there => $placeofdeath, places_printed => \%places_printed, must_postdate => $birth_dt });
					}
				}
				if(my $b = notes({ person => $person, record => $burial, paragraph => 0, note_locations => \@note_locations })) {
					$b =~ tr/\r//;
					$bio .= " ($b)";
				}
			} elsif($placeofbirth && ($placeofburial eq $placeofbirth)) {
				$bio .= " $pronoun was buried";
				if(my $address = $burial->address()) {
					$bio .= " at $address";
				}
				$bio .= ' in ' . lcfirst($person->possessive()) .
					' home town of ';
				my $city = $placeofburial;
				if($city =~ /^(.+?),/) {
					$bio .= $1;
				} else {
					$bio .= place({ person => $person, place => $placeofburial });
				}
			} else {
				$bio .= " $pronoun is buried",
					place({ person => $person, record => $burial, places_printed => \%places_printed, there => $placeofmarriage });
			}
			$end_of_sentence = 0;
		} elsif($dateofdeath || $placeofdeath) {
			$bio .= '.' if(!$end_of_sentence);
			$bio .= "<p>$pronoun died";
			if($dateofdeath) {
				$bio .= ' ' . year({ person => $person, date => $dateofdeath, must_postdate => $birth_dt });
			}
			if($placeofdeath) {
				my $p = place({ person => $person, record => $death, places_printed => \%places_printed });
				$bio .= $p;
				$places_printed{$p} = 1;
			}
			$bio .= cite(@deathcitations);
			# Print notes about the death, if any
			if(my $d = notes({ person => $person, record => $death, note_locations => \@note_locations })) {
				$d =~ tr/\r//;
				$d =~ tr/\n/ /;
				$d =~ s/\.$//;
				$d = lcfirst($d);
				$bio .= " ($d)";
			}
			my $opts = {
				person => $person,
				place => $placeofburial,
				there => $placeofdeath,
				places_printed => \%places_printed,
				must_postdate => $birth_dt,
			};
			my $address;
			if($address = get_value({ person => $person, value => 'burial address' })) {
				$opts->{'address'} = $address;
			}
			if($dateofburial) {
				$bio .= ' and was buried';
				if($placeofburial) {
					if(defined($placeofdeath) && ($placeofburial eq $placeofdeath) && !$death->address()) {
						$bio .= ' there';
						if($address) {
							$bio .= " at $address";
						}
					} else {
						$bio .= place($opts);
					}
				}
				$bio .= ' ' . year({ person => $person, date => $dateofburial });
				if(my $b = notes({ person => $person, record => $burial, paragraph => 0, note_locations => \@note_locations })) {
					$b =~ tr/\r//;
					$bio .= " ($b)";
				}
			} elsif($placeofdeath && ($placeofburial eq $placeofdeath) &&
			   $burial->address() && !$death->address()) {
				$bio .= ' and is buried there at ' . $burial->address();
			} else {
				$bio .= ' and is buried' . place($opts);
			}
			$end_of_sentence = 0;
		}
		$bio .= cite(@burialcitations);
	} elsif($placeofdeath || $dateofdeath) {
		# TODO - extract marriage banns information
		if($person->marriage_bann()) {
			# die 'foo';
		}
		if($placeofdeath && (scalar(@spouses) <= 1) && $placeofmarriage && ($placeofdeath eq $placeofmarriage) && !$printed_residence) {
			if($end_of_sentence) {
				$bio .= 'That';
			} else {
				$bio .= ', which';
			}
			$bio .= ' is also where ' . lcfirst($pronoun);
		} else {
			$bio .= '.' if(!$end_of_sentence);
			$bio .= "<p>$pronoun";
		}
		$bio .= ' died';
		if($dateofdeath) {
			if($dateofbirth && ($dateofdeath eq $dateofbirth)) {
				$bio .= ' on the same day';
			} elsif($placeofdeath && $placeofmarriage && (scalar(@spouses) == 1) && ($placeofdeath eq $placeofmarriage) && !$printed_residence) {
				$bio .= ' ' . year({ person => $person, date => $dateofdeath, must_postdate => $birth_dt });
			} elsif($placeofbirth && $placeofdeath && ($placeofdeath eq $placeofbirth) && ($placeofdeath =~ /^(.+?),.*/) && !$printed_residence) {
				$bio .= " in $1 " .
					year({ person => $person, date => $dateofdeath, must_postdate => $birth_dt });
			} else {
				$bio .= ' ' . year({ person => $person, date => $dateofdeath, must_postdate => $birth_dt });
				if($placeofdeath && ((scalar(@spouses) > 1) || (!$placeofmarriage) || ($placeofdeath ne $placeofmarriage) || $printed_residence)) {
					my $place = place({ person => $person, record => $death, places_printed => \%places_printed });
					if(!defined($place)) {
						$place = place({ person => $person, place => $placeofdeath, places_printed => \%places_printed });
					}
					if(defined($place)) {
						$bio .= $place;
					} elsif($opts{'f'}) {
						die $person->as_string(), "Place of death ($placeofdeath) can't be parsed";
					} elsif($opts{'w'}) {
						red_warning({
							person => $person,
							warning => "Place of death ($placeofdeath) can't be parsed"
						});
					}
				}
			}
		} elsif((!$placeofmarriage) || ($placeofdeath ne $placeofmarriage)) {
			$bio .= place({ person => $person, place => $placeofdeath });
		}
		$bio .= cite(@deathcitations);

		# Print notes about the death, if any
		if(defined($death) && (my $d = notes({ person => $person, record => $death, paragraph => 0, note_locations => \@note_locations }))) {
			$d =~ tr/\r//;
			$d =~ s/\.$//;
			$bio .= " ($d)";
		}
		$end_of_sentence = 0;
	}
	$bio .= '.' if(!$end_of_sentence);
	$end_of_sentence = 1;

	my $all_events_have_date = 1;
	foreach my $event(@events) {
		if((ref($event) ne 'Gedcom::Record') || !$event->date()) {
			$all_events_have_date = 0;
			last;
		}
		my $date = $event->date();
		if(($date !~ /^\d/) || ($date =~ /[a-z]$/i) ||
		   ($date =~ /[\/\-]/) || !date_parser_cached(date => $date)) {
			$all_events_have_date = 0;
			last;
		}
		if(!date_parser_cached(date => $date)) {
			if($opts{'f'}) {
				die $person->as_string(),
					": Event has an invalid date of $date";
			}
			if($opts{'w'}) {
				red_warning({
					person => $person,
					warning => "Event has an invalid date of $date"
				});
			}
			$all_events_have_date = 0;
			last;
		}
	}
	if($all_events_have_date) {
		@events = Sort::Key::DateTime::dtkeysort { $dfn->parse_datetime(@{$date_parser->parse(date => $_->date())}[0]->{'canonical'}) } @events;
	}
	if((scalar(@events) == 2) &&
	   (ref($events[0]) eq 'Gedcom::Record') &&
	   (ref($events[1]) eq 'Gedcom::Record') &&
	   ((($events[0]->type() eq 'Arrival') && ($events[1]->type() eq 'Departure')) ||
	    (($events[1]->type() eq 'Arrival') && ($events[0]->type() eq 'Departure')))) {
		# Simple case - one journey made
		$bio .= '. ' if(!$end_of_sentence);
		$bio .= ' ';

		my $arrival = ($events[0]->type() eq 'Arrival') ? $events[0] : $events[1];
		my $departure = ($events[0]->type() eq 'Departure') ? $events[0] : $events[1];
		my $yod;
		my $yoa;
		my $dod = $departure->date();
		my $doa = $arrival->date();
		my $only_have_departure_year;
		if($doa && $dod && ($doa =~ /(\d{3,4})/)) {
			$yoa = $1;
			$doa =~ s/\s?\d{3,4}//;
			if($dod =~ /(\d{3,4})/) {
				$yod = $1;
				$dod =~ s/\s?\d{3,4}//;
				if($dod =~ /^\d/) {
					$dod = "on $dod";
				} else {
					$dod = "during $yod";
					$only_have_departure_year = 1;
				}
				if($doa =~ /^\d/) {
					$doa = "on $doa";
				} else {
					$doa = "during $doa";
				}
			}
		}
		if($departure || !$doa) {
			if($yod && $yoa && ($yod == $yoa)) {
				$bio .= "During $yod " . lc($person->pronoun());
			} else {
				$bio .= $person->pronoun();

				# $yod = year({ person => $person, record => $departure });
				# $yoa = year({ person => $person, record => $arrival });
			}

			if($ENV{'LANG'} =~ /^en_US/) {
				$bio .= ' traveled';
			} else {
				$bio .= ' travelled';
			}

			if(defined($departure->place())) {
				$bio .= ' from ' . $departure->place();
			} else {
				if($opts{'f'}) {
					die $person->as_string() . ': departure record has no location';
				}
				if($opts{'w'}) {
					red_warning({ person => $person, warning => 'Departure record has no location' });
				}
			}
			if(defined($arrival->place())) {
				$bio .= ' to ' . $arrival->place();
			} else {
				if($opts{'f'}) {
					die $person->as_string() . ': arrival record has no location';
				}
				if($opts{'w'}) {
					red_warning({ person => $person, warning => 'Arrival record has no location' });
				}
			}

			if(defined($dod) && !$only_have_departure_year) {
				$bio .= ", departing $dod and";
			}

			$bio .= " arriving $doa. ";

			if($ENV{'LANG'} =~ /^en_US/) {
				$place_records{'Traveled from'} = $departure;
				$place_records{'Traveled to'} = $arrival;
			} else {
				$place_records{'Travelled from'} = $departure;
				$place_records{'Travelled to'} = $arrival;
			}
		} else {
			$bio .= ucfirst(year({ person => $person, record => $arrival })) .
				' ' . lcfirst($person->pronoun()) .
				' arrived' .
				place({ person => $person, record => $arrival });

			if(my $notes = notes({ record => $arrival, person => $person, note_locations => \@note_locations })) {
				$notes = lcfirst($notes);
				$bio .= " ($notes)";
			}
			$bio .= '.';
			if($ENV{'LANG'} =~ /^en_US/) {
				$place_records{'Traveled to'} = $arrival;
			} else {
				$place_records{'Travelled to'} = $arrival;
			}
		}
		$end_of_sentence = 1;
	} elsif(scalar(@events) == 1) {
		$bio .= '.' if(!$end_of_sentence);
		$end_of_sentence = 1;

		my $event = $person->event();
		if(!ref($event)) {
			my $e = $person->tag_record('EVEN');
			if(ref($e) eq 'Gedcom::Record') {
				$event = $e;
			} else {
				red_warning({ person => $person, warning => "Event record is just description ($event), infomation has been lost" });
				$bio .= ' ' . ucfirst($event) . '.';
			}
		}
		if(ref($event) eq 'Gedcom::Record') {
			my $type = $event->type();
			if(!defined($type)) {
				red_warning({ person => $person, warning => "Can't determine type of event, or the event type is empty" });
			} elsif($type eq 'Arrival') {
				$bio .= ' ' . $person->pronoun() . ' arrived';
				if(my $p = place({ person => $person, record => $events[0] })) {
					$bio .= $p;
				} else {
					if($opts{'f'}) {
						die $person->as_string() . ": arrival record with no place";
					}
					if($opts{'w'}) {
						red_warning({ person => $person, warning => "Arrival record has no place" });
					}
				}
				if(my $y = year({ person => $person, record => $events[0] })) {
					$bio .= " $y";
				} else {
					if($opts{'f'}) {
						die $person->as_string() . ": arrival record with no date";
					}
					if($opts{'w'}) {
						red_warning({ person => $person, warning => "Arrival record has no date" });
					}
				}
				if(my $spouse = $person->spouse()) {
					foreach my $sevent($spouse->event()) {
						if(ref($sevent) eq 'Gedcom::Record') {
							my $type = $event->type();
							if(!defined($type)) {
								red_warning({ person => $spouse, warning => "Can't determine type of event, or the event type is empty" });
							} elsif($sevent->place() && ($type eq 'Arrival') &&
							   $event->date() && $sevent->date() &&
							   ($event->date() eq $sevent->date()) &&
							   ($event->place() eq $sevent->place())) {
								$bio .= ' with ' .
									lcfirst($person->possessive()) . ' ' .
									(($sex eq 'M') ? 'wife' : 'husband') .
									' ' . $spouse->given_names();
							}
						}
					}
				}
				if(my $notes = notes({ record => $event, note_locations => \@note_locations })) {
					$notes = lcfirst($notes);
					$notes =~ s/\.$//;
					$bio .= " ($notes)";
				}
				$bio .= '. ';
				if($ENV{'LANG'} =~ /^en_US/) {
					$place_records{'Traveled to'} = $event;
				} else {
					$place_records{'Travelled to'} = $event;
				}
			} elsif($type eq 'Departure') {
				$bio .= ' ' . $person->pronoun();
				if($ENV{'LANG'} =~ /^en_US/) {
					$bio .= ' traveled';
				} else {
					$bio .= ' travelled';
				}
				my $place = place({ person => $person, record => $events[0] });
				$place =~ s/^\sin/ from/;
				$bio .= "$place " .
					year({ person => $person, record => $events[0] });
				if(my $notes = notes({ record => $event, note_locations => \@note_locations })) {
					$notes = lcfirst($notes);
					$bio .= " ($notes)";
				}
				$bio .= '. ';
			} elsif($type eq 'Military service') {
				$bio .= '.' if(!$end_of_sentence);
				$bio .= " $pronoun served in the military";
				if(my $place = place({ person => $person, record => $event })) {
					$bio .= $place;
				}
				if(my $date = year(record => $event)) {
					$bio .= " $date";
				}

				if(my $notes = notes(record => $event, note_locations => \@note_locations)) {
					$notes = lcfirst($notes) unless($notes =~ /^(RAF|Royal Navy)/);
					$notes =~ s/\.$//;
					$bio .= " (<em>$notes</em>)";
				}
				$end_of_sentence = 0;
			} elsif(($type !~ /^Census U[KS] (\d{4})$/) &&
				($type ne 'Race') &&
				($type ne 'Custom Marriage') &&
				($type ne 'Register UK 1939')) {

				red_warning({ person => $person, warning => "Unhandled event type: $type" });
				if(my $notes = notes(record => $event, note_locations => \@note_locations)) {
					$notes = ucfirst($notes);
					$bio .= " ($notes)";
					$end_of_sentence = 0;
				}
			}
		}
	} else {
		my $mentioned_military;
		my $index = 0;
		my $previous;
		my $prev_type;
		foreach my $event(@events) {
			$index++;
			if(!ref($event)) {
				my $e = $person->tag_record('EVEN', $index);
				if(ref($e) eq 'Gedcom::Record') {
					$event = $e;
				} else {
					red_warning({ person => $person, warning => "Event record is just description ($event), infomation has been lost" });
					$bio .= ' ' . ucfirst($event) . '.';
				}
			}
			if(ref($event) eq 'Gedcom::Record') {
				my $type = $event->type();
				if($type eq 'Military service') {
					if(!$mentioned_military) {
						$bio .= '.' if(!$end_of_sentence);
						$bio .= " $pronoun served in the military";
						if(my $place = place({ person => $person, record => $event })) {
							$bio .= $place;
						}
						if(my $date = year(record => $event)) {
							$bio .= " $date";
						}
						$mentioned_military = 1;
					}

					if(my $notes = notes(record => $event, note_locations => \@note_locations)) {
						$notes = lcfirst($notes) unless($notes =~ /^(RAF|Royal Navy)/);
						$notes =~ s/\.$//;
						$bio .= " (<em>$notes</em>)";
					}
					$end_of_sentence = 0;
				} elsif($type eq 'Arrival') {
					if(!defined($event->place())) {
						if($opts{'f'}) {
							die $person->as_string() . ': arrival record without destination';
						}
						if($opts{'w'}) {
							red_warning({ person => $person, warning => 'Arrival record without destination' });
						}
						next;
					}
					if($events[$index] && ($events[$index]->type() eq 'Arrival') && $event->date()) {
						if($events[$index]->date()) {
							$previous = $event;
							$prev_type = 'Arrival';
							next;
						}
					}
					if($previous) {
						if($prev_type eq 'Departure') {
							my $arrival = $event;
							my $departure = $previous;
							my $yod;
							my $yoa;
							my $dod = $departure->date();
							my $doa = $arrival->date();
							my $only_have_departure_year;
							if($doa && $dod && ($doa =~ /(\d{3,4})/)) {
								$yoa = $1;
								$doa =~ s/\s?\d{3,4}//;
								if($dod =~ /(\d{3,4})/) {
									$yod = $1;
									$dod =~ s/\s?\d{3,4}//;
									if($dod =~ /^\d/) {
										$dod = "on $dod";
									} else {
										$dod = "during $yod";
										$only_have_departure_year = 1;
									}
									if($doa =~ /^\d/) {
										$doa = "on $doa";
									} elsif($yoa == $yod) {
										$doa = 'later that same year';
									} else {
										$doa = "during $yoa";
									}
								}
							}
							if($previous->date()) {
								if($yod && $yoa && ($yod == $yoa)) {
									$bio .= "During $yod " . lc($person->pronoun());
								} else {
									$bio .= $person->pronoun();

									# $yod = year({ person => $person, record => $departure });
									# $yoa = year({ person => $person, record => $arrival });
								}

								if($ENV{'LANG'} =~ /^en_US/) {
									$bio .= ' traveled';
								} else {
									$bio .= ' travelled';
								}

								if(defined($departure->place())) {
									$bio .= ' from ' . $departure->place();
								} else {
									if($opts{'f'}) {
										die $person->as_string() . ': departure record has no location';
									}
									if($opts{'w'}) {
										red_warning({ person => $person, warning => 'Departure record has no location' });
									}
								}
								if(defined($arrival->place())) {
									$bio .= ' to ' . $arrival->place();
								} else {
									if($opts{'f'}) {
										die $person->as_string() . ': arrival record has no location';
									}
									if($opts{'w'}) {
										red_warning({ person => $person, warning => 'Arrival record has no location' });
									}
								}

								if(defined($dod) && !$only_have_departure_year) {
									$bio .= ", departing $dod and";
								}

								$bio .= " arriving $doa. ";
							}
						} else {
							# Two arrival records, put into one sentence for improved readability
							my $date1 = year({ record => $previous });
							my $date2 = year({ record => $event });
							my $year1;
							my $year2;
							if($date1 =~ /(.*)\s?(\d{4})$/) {
								$date1 = $1;
								$year1 = $2;
								$date1 =~ s/,\s//;
							}
							if($date2 =~ /(.*)\s?(\d{4})$/) {
								$date2 = $1;
								$year2 = $2;
								$date2 =~ s/,\s//;
							}
							$bio .= '. ' if(!$end_of_sentence);
							if(defined($year1) && defined($year2) && ($year1 == $year2)) {
								if($date1 eq 'in ') {
									$date1 = '';
								} else {
									$date1 = " $date1";
								}
								$bio .= "During $year1 " . lcfirst($pronoun) . ' arrived' .
									place({ person => $person, record => $previous }) .
									" $date1 and" .
									place({ person => $person, record => $event, nopreposition => 1 }) .
									" $date2.";
							} else {
								$bio .= ucfirst(year({ person => $person, record => $previous })) .
									' ' . lcfirst($person->pronoun()) .
									' arrived' .
									place({ person => $person, record => $previous }) .
									' and ' .
									year({ person => $person, record => $event }) .
									' ' . lcfirst($pronoun),
									' arrived' .
									place({ person => $person, record => $event }) . '.';
							}
						}
						$previous = undef;
					} elsif(my $place = place({ person => $person, record => $event })) {
						if(my $year = year({ person => $person, record => $event })) {
							if($end_of_sentence) {
								$bio .= ucfirst($year);
							} else {
								$bio .= $year;
							}
							$bio .= ' ' . lcfirst($person->pronoun()) . " arrived$place.";
						} elsif($opts{'f'}) {
							die $person->as_string(), "Can't determine $type date";
						} elsif($opts{'w'}) {
							red_warning({ person => $person, warning => "Can't determine $type date" });
						}
					} elsif($opts{'f'}) {
						die $person->as_string(), "Can't determine $type location";
					} elsif($opts{'w'}) {
						red_warning({ person => $person, warning => "Can't determine $type location" });
					}
					$end_of_sentence = 1;
				} elsif($type eq 'Departure') {
					if(!defined($event->place())) {
						if($opts{'f'}) {
							die $person->as_string() . ': departure record without destination';
						}
						if($opts{'w'}) {
							red_warning({ person => $person, warning => 'Departure record without destination' });
						}
						next;
					}
					if($events[$index] && ($events[$index]->type() eq 'Arrival') && $event->date()) {
						if($events[$index]->date()) {
							$previous = $event;
							$prev_type = 'Departure';
							next;
						}
					}
					$bio .= ' ' . $person->pronoun();
					if($ENV{'LANG'} =~ /^en_US/) {
						$bio .= ' traveled';
					} else {
						$bio .= ' travelled';
					}
					my $place = place({ person => $person, record => $event });
					$place =~ s/^\sin/ from/;
					if($event->date()) {
						$bio .= "$place " .
							year({ person => $person, record => $event });
					} else {
						$bio .= $place;
					}
					if(my $notes = notes({ record => $event, note_locations => \@note_locations })) {
						$notes = lcfirst($notes);
						$bio .= " ($notes)";
					}
					$bio .= '. ';
				} elsif(($type !~ /^Census U[KS] (\d{4})$/) &&
					($type ne 'Register UK 1939') &&
					($type ne 'Race') &&
					($type ne 'Hospitalisation')) {
					red_warning({ person => $person, warning => "Unknown event type: $type" });
					if(my $notes = notes(record => $event, note_locations => \@note_locations)) {
						$notes =~ s/\.$//;
						my $date = year(record => $event);
						if($end_of_sentence) {
							if($date) {
								$bio .= ' ' . ucfirst($notes) . " $date. ";
							} else {
								$bio .= ' ' . ucfirst($notes) . '. ';
							}
						} else {
							$notes = lcfirst($notes);
							if($date) {
								$bio .= " ($date, $notes)";
							} else {
								$bio .= " ($notes)";
							}
						}
					}
				}
			}
		}
		$bio .= '.' if(!$end_of_sentence);
		$end_of_sentence = 1;
	}

	if(my $profile_object = $person->tag_record('_MILT')) {
		# $person->resolve_xref($profile_object->value());
		if(my $value = $profile_object->get_value()) {
			$bio .= '.' if(!$end_of_sentence);
			$bio .= " $pronoun served in the military ($value).";
			$end_of_sentence = 1;
		}
	}

	if(defined($ENV{'LANG'})) {
		if($ENV{'LANG'} =~ /^en_US/) {
			$bio = Lingua::EN::ABC::b2a($bio);
		} elsif($ENV{'LANG'} =~ /^en_GB/) {
			$bio = Lingua::EN::ABC::a2b($bio);
		}
	}

	print $html $bio;
	$fullbio .= $bio;

	if($opts{'l'} || !$is_alive) {
		print $csv $bio;
		$bio =~ s/&/&amp;/g;
		$bio =~ s/&amp;amp;/&amp;/g;	# Because of the Encode entities
		$bio =~ s/&amp;Acirc;&amp;copy;/&#169;/g;
		$bio =~ s/&amp;acirc;&amp;#128;&amp;#152;//g;
		$bio =~ s/&amp;pound;/&#163;/g;
		$bio =~ s/&amp;#39;/'/g;
		$bio =~ s/&amp;#/&#/g;
		$bio =~ s/</&lt;/g;
		$bio =~ s/>/&gt;/g;
		print $xml $bio;
	}
	print $csv '!';
	print $xml '</bio>';

	if($opts{'l'} || !$is_alive) {
		print "Create parents\n" if($opts{'v'});
		print $html '</p>';
		if($mother || $father) {
			print $html "<h2>Parents</h2><ol>";
			if($father && (my $f = person_line_html({ person => $father, year => $year }))) {
				print $html "<li>$f</li>";
				print $csv person_line_csv({ person => $father, year => $year });
				print $xml "\n\t\t<father>", HTML::Entities::encode($f), '</father>';
			}
			print $csv '!';
			if($mother && (my $m = person_line_html({ person => $mother, year => $year }))) {
				print $html "<li>$m</li>";
				print $csv person_line_csv({ person => $mother, year => $year });
				print $xml "\n\t\t<mother>", HTML::Entities::encode($m), '</mother>';
			}
			print $html '</ol>';
		} else {
			print $csv '!';
		}
		print $csv '!';
		if(scalar(@children)) {
			print $html '<h2>Children</h2><ol>';
			print $xml "\n\t\t<children>";
		}

		my $c = '';
		foreach my $child(@children) {
			my $line = person_line_html({ person => $child, year => $year });
			print $html "<li>$line</li>";
			print $xml "\n\t\t\t<child>", HTML::Entities::encode($line) . '</child>';
			if($c) {
				$c .= '----' . person_line_csv({ person => $child, year => $year });
			} else {
				$c = person_line_csv({ person => $child, year => $year });
			}
			if($opts{'w'} && ($birth_dt || $death_dt)) {
				my $dob = get_value({ person => $child, value => 'birth date' });
				if($dob && ($dob !~ /^\d{3,4}$/) && ($dob =~ /^\d/) && ($dob !~ /[a-z]$/i)) {
					if(my $d = date_parser_cached(date => $dob)) {
						$d = $dfn->parse_datetime($d->{'canonical'});
						if($birth_dt && ($d <= $birth_dt)) {
							if($opts{'f'}) {
								die $child->name(), ': Born before parent was born';
							}
							red_warning({ person => $child, warning => 'born before parent was born' });
						}
						if(($sex eq 'F') && $death_dt && ($d > $death_dt)) {
							if($opts{'f'}) {
								die $child->name(), ': Born after mother died';
							}
							red_warning({ person => $child, warning => 'born after mother died' });
						} elsif(($sex eq 'M') && $death_dt && ($d > ($death_dt + $tenmonths))) {
							# Allow the child to be
							# born up to 9 months
							# after the death of the
							# father
							if($opts{'f'}) {
								die $child->name(), ': Born more than 10 months after father died';
							}
							red_warning({ person => $child, warning => 'born more than 10 months after father died' });
						}
					}
				}
			}
		}
		if(scalar(@children)) {
			print $html '</ol>';
			print $xml "\n\t\t</children>";
		}
		print $csv $c;
	} else {
		print $csv '!!';
	}

	print $csv '!';
	my $profile_image;
	my $profile_thumbnail;

	if($opts{'l'} || !$is_alive) {
		if($opts{'c'} && $citationcount) {
			print "Create citations\n" if($opts{'v'});
			print $html '<h2>Citations</h2><ol>';
			print $xml "\n\t\t<citations>";
			my $ufinder = URI::Find::Schemeless->new(sub {
				my($uri, $orig_uri) = @_;

				my $u = URI->new($orig_uri);
				if($u && (ref($u) ne 'URI::_generic')) {
					if((!head($orig_uri)) && !get($orig_uri)) {
						if($opts{'f'}) {
							die $person->as_string, ": $orig_uri: not found";
						}
						red_warning({ person => $person, warning => "$orig_uri: not found" });
					}
					$uri =~ s/:$//;
					return "<a HREF=\"$uri\">" .
						$u->host() .
						'</a>';
				}
				return $orig_uri;
			});

			my %census_years;
			foreach my $citation(1..$citationcount) {
				if(!$citations{$citation}) {
					if($opts{'f'}) {
						die $person->as_string(), "[$citation]: empty citation";
					}
					if($opts{'w'}) {
						red_warning({
							person => $person,
							warning => "[$citation]: empty citation"
						});
					}
					next;
				}
				my $title = $citations{$citation}->title();
				if(!defined($title)) {
					if($opts{'f'}) {
						die $person->as_string, "[$citation]: no citation title";
					}
					red_warning({
						person => $person,
						warning => "[$citation]: no citation title"
					});
					next;
				}
				my $c;
				if(my $file = $citations{$citation}->file()) {
					$c = "<a href=\"$file\">" . HTML::Entities::encode($title) . '</a>';
				} else {
					$c = HTML::Entities::encode($title);
					if($title =~ /Census/) {
						my $census = $censusmaps{$title};
						die "Add $title to censusmaps" unless($census);
						# TODO: Add pointer to image
						$censuses{$census}->{$person->as_string(include_years => 1)} = $person;
					}
				}
				if(defined(my $publication = $citations{$citation}->publication())) {
					$c .= ' ' . HTML::Entities::encode($publication);
					if(defined(my $continuation = $citations{$citation}->cont())) {
						$c .= ' ' . HTML::Entities::encode($continuation);
					}
				}
				if(defined(my $page = $citations{$citation}->page())) {
					$c .= ' ' . HTML::Entities::encode($page);
				}
				my @notes = $citations{$citation}->note();
				foreach my $note(@notes) {
					if(ref($note) eq 'Gedcom::Record') {
						$note = $note->note();
					}

					if($note && ($note !~ /^This information comes from/)) {
						$ufinder->find(\$note);
						$c .= ' (' . HTML::Entities::encode($note) . ')';
					}
				}
				if($citationnotes{$citation}) {
					$citationnotes{$citation} =~ s/\.$//;
					$c .= " ($citationnotes{$citation})";
				}
				if(($title =~ /census/i) && ($title =~ /(\d{3,4})/)) {
					$census_years{$1} = $title;
				}

				print $html "<li>$c</li>";
				print $csv '----' if($citation > 1);
				print $csv $c;
				$c =~ s/&/&amp;/g;
				$c =~ s/&amp;Acirc;&amp;copy;/&#169;/g;
				$c =~ s/&amp;acirc;&amp;#128;&amp;#152;//g;
				$c =~ s/&amp;amp;/&amp;/g;	# Because of the Encode entities
				print $xml "\n\t\t\t<citation>$c</citation>";
			}
			print $html '</ol>';
			print $xml "\n\t\t</citations>";

			if($opts{'w'}) {
				foreach my $event(@events) {
					if(ref($event) eq 'Gedcom::Record') {
						my $type = $event->type();
						my $year;
						if($type =~ /^Census U[KS] (\d{4})$/) {
							$year = $1;
							if(!$event->date()) {
								if($opts{'f'}) {
									die $person->as_person(), "Census for $year is missing a date";
								}
								red_warning({ person => $person, warning => "Census for $year missing a date" });
							}
						} elsif($type eq 'Register UK 1939') {
							if(!$event->date()) {
								if($opts{'f'}) {
									die $person->as_person(), '1939 UK register is missing the date 29 Sep 1939';
								}
								red_warning({ person => $person, warning => '1939 UK register is missing the date 29 Sep 1939' });
							}
							$year = 1939;
						} else {
							next;
						}
						$census_years{$year} = $type;
						if(defined($yod) && ($year > $yod)) {
							if($opts{'f'}) {
								die $person->as_person(), "Census for $year is after year of death ($yod)";
							}
							red_warning({ person => $person, warning => "Census for $year after year of death ($yod)" });
						} elsif(defined($yob) && ($year < $yob)) {
							if($opts{'f'}) {
								die $person->as_person(), "Census for $year is after year of birth ($yob)";
							}
							red_warning({ person => $person, warning => "Census for $year after year of birth ($yob)" });
						}
					}
				}
				foreach my $year(sort { $a <=> $b } keys(%census_years)) {
					if($census_years{$year + 20} && !$census_years{$year + 10}) {
						if($opts{'f'}) {
							die 'Census citation missing between ', $census_years{$year}, ' and ', $census_years{$year + 20};
						}
						red_warning({
							person => $person,
							warning => 'Census citation missing between ' . $census_years{$year} . ' and ' . $census_years{$year + 20}
						});
					}
				}
			}
		}

		print $csv '!';

		# my $printed_notes;
		# if($death && (my $notes = notes({ person => $person, record => $death, paragraph => 1 }))) {
			# print $html "<h2>Notes</h2>$notes";
			# $printed_notes = 1;
			# print $csv notes({ person => $person, record => $death });
		# }

		if($person->get_value('note')) {
			print $html '<h2>Notes</h2>';

			if(my $notes = notes({ person => $person, paragraph => 1, record => $person, note_locations => \@note_locations })) {
				print $html $notes;
				# print $csv '----' if($printed_notes);
				print $csv notes({ person => $person, record => $person, note_locations => \@note_locations });
				$notes =~ s/&pound;/&#163;/g;
				$notes =~ s/</&lt;/g;
				$notes =~ s/>/&gt;/g;
				$notes =~ s/\s*&excl;/!/g;
				$notes =~ s/&Acirc;//g;
				print $xml "\n\t\t<note>$notes</note>";
			}
			# print $html map { "<p>$_</p>" } @notes;
		}

		print $csv '!';

		# FIXME: Should be a table mapping from records to profiles
		my $s_profile_image;

		# print 'f:', $person->form() if($person->form());

		if($person->obje()) {
			# TODO - find primary and do something different with that
			#	The obje should be in order with primary first, but FMP
			#	doesn't do that
			#	Gedcom doesn't seem to be able to handle extra _ tags,
			#	or if it can I can't work out how to make use of it
			warn $person->{"_prof"}, "\n" if($person->{'_prof'});
			warn $person->{"prof"}, "\n" if($person->{'prof'});
			warn $person->{"_PROF"}, "\n" if($person->{'_PROF'});
			warn $person->{"PROF"}, "\n" if($person->{'PROF'});
			warn $person->{"_prim"}, "\n" if($person->{'_prim'});
			warn $person->{"prim"}, "\n" if($person->{'prim'});
			warn $person->{"_PRIM"}, "\n" if($person->{'_PRIM'});
			# warn $person->tag_records("PRIM"), "\n" if($person->tag_records('PRIM'));
			# warn $person->tag_records("_PRIM"), "\n" if($person->tag_records('_PRIM'));
			# warn $person->get_value("_prof"), "\n" if($person->get_value('_prof'));
			# warn $person->get_value("prof"), "\n" if($person->get_value('prof'));
			# warn $person->get_value("_PROF"), "\n" if($person->get_value('_PROF'));
			# warn $person->get_value("PROF"), "\n" if($person->get_value('PROF'));
			# warn $person->get_value("_prim"), "\n" if($person->get_value('_prim'));
			# warn $person->get_value("prim"), "\n" if($person->get_value('prim'));
			# warn $person->get_value("_PRIM"), "\n" if($person->get_value('_PRIM'));
			my $profile_object = $person->tag_record('_PROF');
			if($profile_object) {
				$profile_object = $person->resolve_xref($profile_object->value());
			}
			my $printed_media_header = 0;

			my %downloadhistory;

			# Two passes, the first one where the links are pictures, the second where they are not
			for(my $pass = 1; $pass <= 2; $pass++) {
				print "Media pass $pass\n" if($opts{'v'});
				OBJE: foreach my $o($person->obje()) {
					my $obje;
					if(ref($o) eq 'Gedcom::Record') {
						$obje = $o;	# e.g. Ancestry
					} else {
						$obje = $ged->resolve_xref($o);	# e.g. FMP
					}
					next if(!defined($obje));
					if(my $file = $obje->file()) {
						if(ref($file) eq 'Gedcom::Record') {
							# warn $file->tag(), "\n" if($file->tag());
							$file = $file->{'file'};
							next if($file eq '*');
						}
						if(!$printed_media_header) {
							print $html '<h2>Media</h2>';
							print $xml "\n\t\t<media>";
							$printed_media_header = 1;
						}

						warn $obje->{"_prim"}, "\n" if($obje->{'_prim'});
						warn $obje->{"prim"}, "\n" if($obje->{'prim'});
						warn $obje->{"_PRIM"}, "\n" if($obje->{'_PRIM'});
						warn $obje->{"PRIM"}, "\n" if($obje->{'PRIM'});
						warn $obje->{"_prof"}, "\n" if($obje->{'_prof'});
						warn $obje->{"prof"}, "\n" if($obje->{'prof'});
						warn $obje->{"_PROF"}, "\n" if($obje->{'_PROF'});
						warn $obje->{"PROF"}, "\n" if($obje->{'PROF'});
						warn $obje->{"_DATE"}, "\n" if($obje->{'_DATE'});
						warn $obje->{"_date"}, "\n" if($obje->{'_date'});
						# warn $obje->tag(), "\n" if($obje->tag());
						my $title = $obje->title() || $obje->tag_record('TITL', 1);
						$title =~ s/\s\s+/ /g;
						my $form = $obje->form();
						if((!$form) && $obje->items()) {
							# Family Tree Maker does this
							my @items = $obje->items();
							$file = $items[0]->{'value'};
							# TODO: Find the title
						}
						$file =~ s/\{0\}//g;
						$file =~ s/\r//g;
						if($opts{'d'} && ($file =~ /^https?:\/\//) && ($file !~ /\.jpe?g$/) && ($file !~ /ancestry.com.*image.*guid=/)) {
							$file =~ s/%2f/\//gi;

							my $localfile = 'static-site/img/' . make_filename_from_object(object => $obje) . '.jpg';
							# FIXME: It should check if the remote image is newer than the local image
							if(!-r $localfile) {
								if($file =~ /^http:\/\/(\w+)\.findmypast\.(co[\w\.]+)\/(.+)/) {
									$file = "https://$1.findmypast.$2/$3";
								}
								print "Download non-image $file\n" if($opts{'v'});
								my $resp = $browser->get($file);
								if($resp->is_success() && ($resp->content_type() eq 'image/jpeg')) {
									next OBJE if($pass == 2);
									my $key = $person->as_string() . ";$localfile";
									if($images{$key}) {
										# Flag a person having two images of the same
										# name
										if($opts{'f'}) {
											die $person->as_string(), ": $localfile duplicate filename";
										}
										red_warning({ person => $person, warning => "duplicate filename: $localfile" });
									}
									my $tmp;
									if($jpegtran) {
										open($tmp, '|-', "$jpegtran -progressive -outfile '$localfile'");
									} elsif($jpegoptim) {
										open($tmp, '|-', "$jpegoptim -q --all-progressive --stdin > '$localfile'");
									} else {
										open($tmp, '>', $localfile);
									}
									print $tmp $resp->decoded_content();
									close $tmp;
									$form = 'JPG';
									$images{$key} = 1;
									if($^O eq 'MSWin32') {
										copy($localfile, 'dynamic-site/img/' . make_filename_from_object(object => $obje) . '.jpg');
									} else {
										link $localfile, 'dynamic-site/img/' . make_filename_from_object(object => $obje) . '.jpg';
										chmod 0444, $localfile;
									}
								}
							}
						} elsif(($file =~ /^([A-Z]:[\/\\].+\.jpe?g+)/) || ($file =~ /^(\/.+\.jpe?g)/)) {
							next OBJE if($pass == 2);
							my $srcfile = $1;
							if(!-r $srcfile) {
								# Patch from github.com/cablespaghetti
								if($opts{'f'}) {
									die $person->as_string(), ": $srcfile file not found";
								}
								if($opts{'w'}) {
									red_warning({ person => $person, warning => "$srcfile: file not found" });
								}
								next OBJE;
							}
							my $localfile = 'static-site/img/' . make_filename_from_object(object => $obje) . '.jpg';
							if(!-r $localfile) {
								if($jpegtran) {
									system("$jpegtran -progressive -outfile '$localfile' '$srcfile'");
								} elsif($jpegoptim) {
									copy($srcfile, $localfile);
									system("$jpegoptim -q --all-progressive '$localfile'");
								} else {
									copy($srcfile, $localfile);
								}
								if($^O eq 'MSWin32') {
									copy($localfile, 'dynamic-site/img/' . make_filename_from_object(object => $obje) . '.jpg');
								} else {
									link $localfile, 'dynamic-site/img/' . make_filename_from_object(object => $obje) . '.jpg';
								}
							}
							$form = 'JPG';
							my $key = $person->as_string() . ";$localfile";
							$images{$key} = 1;
						}
						if($form && ($form =~ /^JPG$/i)) {
							next OBJE if($pass == 2);
							if($title) {
								print $html "<h3>$title</h3>";
							} else {
								print $html '<br>';
							}
							if($opts{'d'}) {
								if($downloadhistory{$file}) {
									# Ancestry does this
									print "Skip duplicate image $file\n" if($opts{'v'});
									next OBJE;
								}
								$downloadhistory{$file} = 1;

								# Get and stash a local copy
								if($file =~ /ancestry.com.+guid=.+&tid=/) {
									# Ancestry's Gedcoms are broken, perhaps pointing to an old
									# location that they forgot to fix
									print "Map from $file\n" if($opts{'v'});
									if($file =~ /guid=([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})/) {
										# FIXME: Ancestry pictures attached from another
										# tree aren't downloaded.  This URL will generate a
										# 404
										$file = "https://mediasvc.ancestry.com/v2/image/namespaces/1093/media/$1.jpg?client=Trees";
									} elsif($opts{'w'}) {
										if($opts{'f'}) {
											die "BUG: update ACOM mapping for $file";
										}
										red_warning({ person => $person, warning => "BUG: update ACOM mapping for $file" });
										next OBJE;
									}
								}
								if($file =~ /^http:\/\/(\w+)\.findmypast\.(co[\w\.]+)\/(.+)/) {
									$file = "https://$1.findmypast.$2/$3";
								}
								print "Download image $file\n" if($opts{'v'});
								my $localfile = 'img/' . make_filename_from_object(object => $obje) . '.jpg';
								my $rc;
								if((-r "static-site/$localfile") ||
								   is_success($rc = getstore($file, "static-site/$localfile"))) {
									my $info = Image::Info::image_info("static-site/$localfile");
									my ($w, $h) = Image::Info::dim($info);
									if(!defined($w)) {
										if($opts{'f'}) {
											die "Can't get image information for static-site/$localfile";
										}
										red_warning({ person => $person, warning => "Can't get image information for static-site/$localfile" });
										# unlink "static-site/$localfile";
										next OBJE;
									}
									$h *= 175 / $w;
									$h = int($h);
									# print $html "<a href=\"$file\" target=\"_blank\">",
									if($title) {
										print $html "<a href=\"$localfile\" target=\"_blank\">",
											'<img src="', $localfile, "\" alt=\"$title\" width=\"175\" height=\"$h\">",
											'</a>';
										print $csv "/$localfile---$title---$h----";
										print $xml "\n\t\t\t<image>\n\t\t\t\t<file>$localfile</file>\n\t\t\t\t<title>$title</title>\n\t\t\t\t<height>$h</height>\n\t\t\t</image>";
									} else {
										print $html "<a href=\"$localfile\" target=\"_blank\">",
											'<img src="', $localfile, "\" width=\"175\" height=\"$h\">",
											'</a>';
										print $csv "/$localfile--- ---$h----";
										print $xml "\n\t\t\t<image>\n\t\t\t\t<file>$localfile</file>\n\t\t\t\t<height>$h</height>\n\t\t\t</image>";
									}
									if(defined($profile_object) && ($obje eq $profile_object)) {
										$s_profile_image = "static-site/$localfile";
									}
									unless(-r "dynamic-site/$localfile") {
										if($^O eq 'MSWin32') {
											copy("static-site/$localfile", "dynamic-site/$localfile");
										} else {
											link "static-site/$localfile", "dynamic-site/$localfile";
										}
									}
								} else {
									red_warning({ person => $person, warning => "download $file failed to static-site/$localfile: $rc" });

									if($title) {
										print $html "<a href=\"$file\" target=\"_blank\">",
											"<img src=\"$file\" alt=\"$title\" width=\"175\">",
											'</a>';
										print $csv "$file---$title---0----";
										$title =~ s/&/&amp;/g;
										print $xml "\n\t\t<image><url>$file</url><title>$title</title></image>";
									} else {
										print $html "<a href=\"$file\" target=\"_blank\">",
											"<img src=\"$file\" width=\"175\">",
											'</a>';
										print $csv "$file--- ---0----";
										print $xml "\n\t\t<image><url>$file</url></image>";
									}
									if(defined($profile_object) && ($obje eq $profile_object)) {
										$s_profile_image = $file;
									}
								}
							} else {
								# Use the remote copy
								if($title) {
									print $html "<a href=\"$file\" target=\"_blank\">",
										"<img src=\"$file\" alt=\"$title\" width=\"175\">",
										'</a>';
									print $csv "$file---$title---0----";
									$title =~ s/&/&amp;/g;
									print $xml "\n\t\t<image><url>$file</url><title>$title></title></image>";
								} else {
									print $html "<a href=\"$file\" target=\"_blank\">",
										"<img src=\"$file\" width=\"175\">",
										'</a>';
									print $csv "$file--- ---0----";
									print $xml "\n\t\t<image><url>$file</url></image>";
								}
								if(defined($profile_object) && ($obje eq $profile_object)) {
									$s_profile_image = $file;
								}
							}
						} else {
							next OBJE if($pass == 1);
							print $html "<a href=\"$file\" target=\"_blank\">",
								$title ? HTML::Entities::encode($title) : 'Media',
								'</a>';
							print $csv "$file---",
								$title ? HTML::Entities::encode($title) : 'Media',
								'---0----';
							if($title) {
								$title = HTML::Entities::encode($title);
								$title =~ s/&/&amp;/g;
								print $xml "\n\t\t\t<image>\n\t\t\t\t<file>$file</file>\n\t\t\t\t<title>$title</title>\n\t\t\t</image>";
							} else {
								print $xml "\n\t\t\t<image>\n\t\t\t\t<file>$file</file>\n\t\t\t</image>";
							}
						}
						# if($obje->date()) {
							# die $obje->date();
						# }
						print $html '<br>';
					}
				}
			}
			if($printed_media_header) {
				print $xml "\n\t\t</media>";
			}
		}
		print $csv '!';

		if(defined($dot)) {
			print "Create family tree\n" if($opts{'v'});
			my $png = 'static-site/img/' . make_filename_from_object(object => $person) . '.png';
			my $tmp = File::Temp->new();
			my $filename = $tmp->filename();
			if(open(my $fout, '|-', "$dot -Tpng -o$png -Tcmapx -o$filename")) {
			# if(open(my $fout, '|-', '/bin/cat')) {
				# print $fout 'digraph family { graph [rankdir=LR];';
				print $fout 'digraph family {',
					' subgraph parents { rank="min"; ';
				if($father) {
					print_graphviz({ person => $father, fout => $fout, format => 'static' });
				}
				if($mother) {
					print_graphviz({ person => $mother, fout => $fout, format => 'static' });
				}
				print $fout '} subgraph main { rank="same"; ';
				print_graphviz({ person => $person, fout => $fout, profile_image => $s_profile_image, format => 'static' });
				foreach my $spouse(@spouses) {
					print_graphviz({ person => $spouse, fout => $fout, format => 'static' });
				}
				print $fout '} subgraph children { rank="max"; ';
				# TODO: sort by date of birth
				foreach my $child(@children) {
					print_graphviz({ person => $child, fout => $fout, format => 'static' });
				}
				print $fout '} ';

				if($mother) {
					print $fout $mother->{'xref'}, ' -> ', $person->{'xref'}, ";\n";
				}
				if($father) {
					print $fout $father->{'xref'}, ' -> ', $person->{'xref'}, ";\n";
				}
				if(scalar(@spouses) == 2) {
					# Married twice, put the person in the middle,
					# it looks better
					# print $fout $person->{'xref'}, ' -> ', $spouses[0]->{'xref'}, " [dir=none];\n";
					print $fout $spouses[0]->{'xref'}, ' -> ',
						$person->{'xref'}, ' -> ',
						$spouses[1]->{'xref'}, " [dir=none];\n";
				} else {
					foreach my $spouse(@spouses) {
						print $fout $person->{'xref'}, ' -> ', $spouse->{'xref'}, " [dir=none];\n";
						# print $fout $person->{'xref'}, ' -> ', $spouse->{'xref'}, " [dir=none];\n";
					}
				}
				foreach my $child(@children) {
					print $fout $person->{'xref'}, ' -> ', $child->{'xref'}, ";\n";
				}

				print $fout '}';
				close $fout;

				print $html '<h2>Family Tree</h2>';
				my $filename = make_filename_from_object(object => $person);
				my $dim = Image::Info::html_dim(Image::Info::image_info($png));
				print $html "<img src=\"img/$filename.png\" $dim", ' usemap="#family" alt="Family Tree">';
				$tmp->seek(0, SEEK_SET);
				foreach my $line(<$tmp>) {
					chomp $line;
					print $html $line;
				}
			}
			$png = "dynamic-site/img/" . make_filename_from_object(object => $person) . '.png';
			$tmp = File::Temp->new();
			$filename = $tmp->filename();
			if(open(my $fout, '|-', "$dot -Tpng -o$png -Tcmapx -o$filename")) {
			# if(open(my $fout, '|-', '/bin/cat')) {
				# print $fout 'digraph family { graph [rankdir=LR];';
				# Best to agree with the colour in css/web.css
				# print $fout 'digraph family { bgcolor="#d6d6d6"',
				print $fout 'digraph family {',
					' subgraph parents { rank="min"; ';
				if($father) {
					print_graphviz({ person => $father, fout => $fout, format => 'dynamic' });
				}
				if($mother) {
					print_graphviz({ person => $mother, fout => $fout, format => 'dynamic' });
				}
				print $fout '} subgraph main { rank="same"; ';
				$profile_image = $s_profile_image;
				if(defined($profile_image)) {
					$profile_image =~ s/static/dynamic/;
				}
				$profile_thumbnail = print_graphviz({ person => $person, fout => $fout, profile_image => $profile_image, format => 'dynamic' });
				foreach my $spouse(@spouses) {
					print_graphviz({ person => $spouse, fout => $fout, format => 'dynamic' });
				}
				print $fout '} subgraph children { rank="max"; ';
				# TODO: sort by date of birth
				foreach my $child(@children) {
					print_graphviz({ person => $child, fout => $fout, format => 'dynamic' });
				}
				print $fout '} ';

				if($mother) {
					print $fout $mother->{'xref'}, ' -> ', $person->{'xref'}, ";\n";
				}
				if($father) {
					print $fout $father->{'xref'}, ' -> ', $person->{'xref'}, ";\n";
				}
				if(scalar(@spouses) == 2) {
					# Married twice, put the person in the middle,
					# it looks better
					# print $fout $person->{'xref'}, ' -> ', $spouses[0]->{'xref'}, " [dir=none];\n";
					print $fout $spouses[0]->{'xref'}, ' -> ',
						$person->{'xref'}, ' -> ',
						$spouses[1]->{'xref'}, " [dir=none];\n";
				} else {
					foreach my $spouse(@spouses) {
						print $fout $person->{'xref'}, ' -> ', $spouse->{'xref'}, " [dir=none];\n";
						# print $fout $person->{'xref'}, ' -> ', $spouse->{'xref'}, " [dir=none];\n";
					}
				}
				foreach my $child(@children) {
					print $fout $person->{'xref'}, ' -> ', $child->{'xref'}, ";\n";
				}

				print $fout '}';
				close $fout;

				my $filename = make_filename_from_object(object => $person);
				my $dim = Image::Info::html_dim(Image::Info::image_info($png));
				print $csv "/img/$filename.png---$dim---";
				print $xml "\n\t\t<profile>/img/$filename.png</profile>";
				$tmp->seek(0, SEEK_SET);
				print $xml "\n\t\t<family_tree>";
				foreach my $line(<$tmp>) {
					chomp $line;
					print $csv $line;
					$line =~ s/</&lt;/g;
					$line =~ s/>/&gt;/g;
					$line =~ s/&/&amp;/g;
					$line =~ s/&amp;amp;/&amp;/g;
					print $xml $line;
				}
				print $xml '</family_tree>';
			}
		} elsif(defined($dot)) {
			if($opts{'f'}) {
				die "$dot: $!";
			} else {
				red_warning(warning => "$dot: $!");
			}
		}
	}
	print $csv '!';

	my @place_events = keys %place_records;
	if($opts{'m'} && ($opts{'l'} || !$is_alive) && (scalar(@place_events) || scalar(@note_locations))) {
		print "Create map\n" if($opts{'v'});
		my $map;
		my $current_place;
		my $annotation;
		# Sort put all events at a place on the same pointer
		# TODO: then sort in date order
		foreach my $event(sort @place_events) {
			my $record = $place_records{$event};
			my $place = place({ record => $record });
			if(defined($place) && ($place =~ /,.+,/)) {
				$place =~ s/^\s(at|in)\s//;
				if(defined($current_place) && ($place ne $current_place)) {
					if(!defined($map)) {
						# my %args = (geocoder => $geocoder, z_index => -1);
						my %args = (geocoder => $geocoder);
						if($javascript_key) {
							$args{'api_key'} = $javascript_key;
						}
						$map = HTML::GoogleMaps::V3->new(%args);
						$map->center($current_place);
					}
					add_marker(person => $person, map => $map, place => $current_place, annotation => $annotation);
					$current_place = $place;
					$annotation = undef;
				} elsif(!defined($current_place)) {
					$current_place = $place;
				}
				my $text = $event;
				$text =~ s/\/.+//;	# Remove count e.g. when more than one residence
				if($record->date()) {
					$text .= ' ' . year({ person => $person, record => $record });
				}
				$annotation .= "<p>$text</p>";
			}
		}
		foreach my $location(@note_locations) {
			my %args = (geocoder => $geocoder);
			if($javascript_key) {
				$args{'api_key'} = $javascript_key;
			}
			my $place = $location->{'location'};
			if(defined($current_place) && ($place ne $current_place)) {
				if(!defined($map)) {
					# my %args = (geocoder => $geocoder, z_index => -1);
					my %args = (geocoder => $geocoder);
					if($javascript_key) {
						$args{'api_key'} = $javascript_key;
					}
					$map = HTML::GoogleMaps::V3->new(%args);
					$map->center($current_place);
				}
				add_marker(person => $person, map => $map, place => $current_place, annotation => $annotation);
				$current_place = $place;
				$annotation = undef;
			} elsif(!defined($current_place)) {
				$current_place = $place;
			}
			$annotation .= '<p>' . $location->{'text'} . '</p>';
		}
		if($current_place) {
			if(!defined($map)) {
				# my %args = (geocoder => $geocoder, z_index => -1);
				my %args = (geocoder => $geocoder);
				if($javascript_key) {
					$args{'api_key'} = $javascript_key;
				}
				$map = HTML::GoogleMaps::V3->new(%args);
				$map->center($current_place);
			}
			add_marker(person => $person, map => $map, place => $current_place, annotation => $annotation);
		}
		if(defined($map)) {
			# Can't put $head into the head since it's far too
			# late now!
			my ($head, $map_div) = $map->onload_render();
			$head =~ s/http:/https:/;
			# if($opts{'M'}) {
				# # Don't include the key in the webpage.
				# $head =~ s/\?key=\w+?"/"/;
			# }
			print $html "$head<h2>Map</h2>$map_div\n";
			print $csv MIME::Base64::encode_base64url($head), '!', MIME::Base64::encode_base64url($map_div), '!';
			print $xml "\n\t\t<map>\n\t\t\t<head>", MIME::Base64::encode_base64url($head), "</head>\n\t\t\t<body>", MIME::Base64::encode_base64url($map_div), "</body>\n\t\t</map>";
		} else {
			print $csv '!!';
		}
	} else {
		print $csv '!!';
	}

	if($birth_dt && ($opts{'l'} || !$is_alive)) {
		print $csv $birth_dt->strftime('%Y/%m/%d');
		print $xml "\n\t\t<birth>", $birth_dt->strftime('%Y/%m/%d'), '</birth>';
	}
	print $csv '!';
	if($death_dt && ($opts{'l'} || !$is_alive)) {
		print $csv $death_dt->strftime('%Y/%m/%d');
		print $xml "\n\t\t<death>", $death_dt->strftime('%Y/%m/%d'), '</death>';
	}
	print $csv '!';

	my $dt;
	if($ENV{'LANG'}) {
		$dt = DateTime->now(locale => $ENV{'LANG'});
	} else {
		$dt = DateTime->now();
	}
	print $html '<p align="right"><i>',
		'Generated by <a href="https://github.com/nigelhorne/ged2site">ged2site</a>. ',
		'Last updated on ',
		$dt->strftime('%x'),
		# $dt->day(), ' ', $dt->month_name(), ' ', $dt->year(),
		'</i></p>';

	if($birth_dt && ($opts{'l'} || !$is_alive) && $me && ($relationship || ($person eq $me))) {
		print $timeline_xml '<event start="', $birth_dt->year();
		if($birth_dt->month() && $birth_dt->day()) {
			printf $timeline_xml '-%02d', $birth_dt->month();
			if($birth_dt->day()) {
				printf $timeline_xml '-%02d', $birth_dt->day();
			}
		}
		print $timeline_xml '" ';

		if($death_dt) {
			print $timeline_xml 'end="', $death_dt->year();
			if($death_dt->month() && $death_dt->day()) {
				printf $timeline_xml '-%02d', $death_dt->month();
				if($death_dt->day()) {
					printf $timeline_xml '-%02d', $death_dt->day();
				}
			}
			print $timeline_xml '" ';
		}

		my $localfile;
		if($profile_thumbnail) {
			$localfile = "dynamic-site/img/thumb-$profile_thumbnail";
			$localfile =~ s/thumbs\///;
			unless(-r $localfile) {
				if($^O eq 'MSWin32') {
					copy($profile_thumbnail, $localfile);
				} else {
					link($profile_thumbnail, $localfile);
				}
			}
			$localfile =~ s/^dynamic-site\///;
			print $timeline_xml "image=\"/$localfile\" ";
			$profile_thumbnail = $localfile;
		}

		# Don't need citations here, and also some phrases are missing
		# leading to double commas
		$fullbio =~ s/<span class="citation">[\d,]+?<\/span>([\s\.;,])/$1/g;
		$fullbio =~ s/,,/,/g;
		$fullbio =~ s/href="\?page=/href="cgi-bin\/page.fcgi?page=/g;
		print $timeline_xml 'title="', $person->as_string(), '" ',
			'link="/cgi-bin/page.fcgi?page=people&amp;entry=', $person->{'xref'}, '"',
			'>', HTML::Entities::encode($fullbio),
			"<\/event>\n";

		print $visjs "{\ncontent: '<a href=\"cgi-bin/page.fcgi?page=people&entry=",
			$person->{'xref'}, '">', $person->as_string(), "</a>',\n",
			'start: \'', $birth_dt->year();

		if($birth_dt->month() && $birth_dt->day()) {
			printf $visjs '-%02d', $birth_dt->month();
			if($birth_dt->day()) {
				printf $visjs '-%02d', $birth_dt->day();
			}
		}
		print $visjs "'";

		if($death_dt) {
			print $visjs ",\nend: '", $death_dt->year();
			if($death_dt->month() && $death_dt->day()) {
				printf $visjs '-%02d', $death_dt->month();
				if($death_dt->day()) {
					printf $visjs '-%02d', $death_dt->day();
				}
			}
			print $visjs "'";
		}

		print $visjs ",\ntitle: '";
		if($profile_thumbnail) {
			print $visjs "<img src=\"/$profile_thumbnail\" alt=\"", $person->as_string(), "\"><p>";
			print $csv $profile_thumbnail;
			print $xml "\n\t\t<thumbnail>$profile_thumbnail</thumbnail>";
		}
		$fullbio =~ s/'/\&#39;/g;
		print $visjs '<h2>', $person->as_string(), "</h2><hr>$fullbio'\n},\n";
	}

	my $m;
	if($opts{'l'} || !$is_alive) {
		foreach my $spouse(@spouses) {
			my $date;
			if(my $rec = $spouse->get_record('fams marriage')) {
				$date = $rec->date();
			} elsif($rec = $spouse->get_record('marriage')) {
				$date = $rec->date();
			}
			if($date) {
				if(my $marriage_dt = date_to_datetime(date => $date)) {
					if($marriage_dt->month() && $marriage_dt->day()) {
						$m .= '---' if($m);
						$m .= $marriage_dt->strftime('%Y/%m/%d');
					}
				} elsif($date =~ /^\d{3,4}/) {
					$m .= '---' if($m);
					$m .= $date;
				}
			}
		}
	}

	if(defined($m)) {
		print $csv "!$m!$sex!";
		print $xml "\n\t\t<marriage>$m</marriage>\n\t\t<sex>$sex</sex>";
	} else {
		print $csv "!!$sex!";
		print $xml "\n\t\t<sex>$sex</sex>";
	}

	my $birth_country = '';

	if($placeofbirth && ($placeofbirth =~ /.+,\s?(.+)$/)) {
		my $c = $1;
		if($c eq 'England') {
			$c = 'United Kingdom'
		} elsif($c eq 'USA') {
			$c = 'United States';
		} elsif($c eq 'Scotland') {
			$c = 'United Kingdom';
		} elsif($c eq 'Wales') {
			$c = 'United Kingdom';
		} elsif($c eq 'Isle of Man') {
			$c = 'United Kingdom';
		}
		my $b;
		eval {
			$b = Locale::Object::Country->new(name => $c);
		};
		if(defined($b)) {
			$birth_country = $b->code_alpha2();
		} elsif($opts{'w'}) {
			if($opts{'f'}) {
				die $person->as_string(), ": Unknown birth country '$c'";
			}
			red_warning({ person => $person, warning => "Unknown birth country: '$c'" });
		}
	}

	my $death_country = '';

	if($placeofdeath && ($placeofdeath =~ /.+,\s?(.+)$/)) {
		my $c = $1;
		if($c eq 'England') {
			$c = 'United Kingdom'
		} elsif($c eq 'USA') {
			$c = 'United States';
		} elsif($c eq 'Scotland') {
			$c = 'United Kingdom';
		} elsif($c eq 'Wales') {
			$c = 'United Kingdom';
		} elsif($c eq 'Isle of Man') {
			$c = 'United Kingdom';
		}
		my $d;
		eval {
			$d = Locale::Object::Country->new(name => $c);
		};
		if(defined($d)) {
			$death_country = $d->code_alpha2();
		} elsif($opts{'w'}) {
			if($opts{'f'}) {
				die $person->as_string(), ": Unknown death country '$c'";
			}
			red_warning({ person => $person, warning => "Unknown death country: '$c'" });
		}
	}

	if($geocoder && ($opts{'l'} || !$is_alive) && ($placeofbirth || $placeofdeath)) {
		print $xml "\n\t\t<locations>";
		if($placeofbirth) {
			if(my @locations = $geocoder->geocode($placeofbirth)) {
				# if(scalar(@locations) > 1) {
					# if($opts{'f'}) {
						# die $person->as_string(), ": Ambiguous birth location $placeofbirth";
					# }
					# red_warning({ person => $person, warning => "Ambiguous birth location $placeofbirth" });
				# } elsif(!defined($locations[0]->{'error'})) {
				print $xml "\n\t\t\t<birth>";
				if($birth_country) {
					print $xml "\n\t\t\t\t<country>$birth_country</country>";
				}
				if(!defined($locations[0]->{'error'})) {
					print $csv $locations[0]->{geometry}{location}{lat}, ',',
						$locations[0]->{geometry}{location}{lng};
					print $xml "\n\t\t\t\t<lat>", $locations[0]->{geometry}{location}{lat}, '</lat>',
						"\n\t\t\t\t<long>", $locations[0]->{geometry}{location}{lng}, '</long>';
				}
				print $xml "\n\t\t\t</birth>";
			} elsif($opts{'w'}) {
				if($opts{'f'}) {
					die $person->as_string(), ": Unknown birth location $placeofbirth";
				}
				red_warning({ person => $person, warning => "Unknown birth location $placeofbirth" });
			}
		}
		print $csv '!';
		if($placeofdeath) {
			if(my @locations = $geocoder->geocode($placeofdeath)) {
				# if(scalar(@locations) > 1) {
					# if($opts{'f'}) {
						# die $person->as_string(), ": Ambiguous death location $placeofdeath";
					# }
					# red_warning({ person => $person, warning => "Ambiguous death location $placeofdeath" });
				# } elsif(!defined($locations[0]->{'error'})) {
				print $xml "\n\t\t\t<death>";
				if($death_country) {
					print $xml "\n\t\t\t\t<country>$death_country</country>";
				}
				if(defined($locations[0]->{gemoetry}{location}) && !defined($locations[0]->{'error'})) {
					print $csv $locations[0]->{geometry}{location}{lat}, ',',
						$locations[0]->{geometry}{location}{lng};
					print $xml "\n\t\t\t\t<lat>", $locations[0]->{geometry}{location}{lat}, '</lat>',
						"\n\t\t\t\t<long>", $locations[0]->{geometry}{location}{lng}, '</long>';
				}
				print $xml "\n\t\t\t</death>";
			} elsif($opts{'w'}) {
				if($opts{'f'}) {
					die $person->as_string(), ": Unknown death location $placeofdeath";
				}
				red_warning({ person => $person, warning => "Unknown death location $placeofdeath" });
			}
		}
		print $csv '!';
		print $xml "\n\t\t</locations>";
	} else {
		print $csv '!!';
	}

	print $csv "!$birth_country!$death_country";

	if($person->{'warnings'}) {
		print "Create warnings\n" if($opts{'v'});
		my $ufinder = URI::Find::Schemeless->new(sub {
			my($uri, $orig_uri) = @_;

			my $u = URI->new($orig_uri);
			if($u && (ref($u) ne 'URI::_generic')) {
				$uri =~ s/:$//;
				return "<a href=\"$uri\">" .
					HTML::Entities::encode($u->host()) .
					'</a>';
			}
			return $orig_uri;
		});
		my @issues = map { my $s = HTML::Entities::decode($_); if($s =~ /<a href="/i) { $s } else { $ufinder->find(\$s); "<p>$s</p>" } } @{$person->{'warnings'}};
		print $html "<h2>Known Issues</h2>@issues";
		print $csv @issues;
		print $xml "\n\t\t<issues>";
		foreach my $issue(@issues) {
			$issue =~ s/^<p>//;
			$issue =~ s/<\/p>$//;
			$issue =~ s/</&lt;/g;
			$issue =~ s/>/&gt;/g;
			$issue =~ s/&/&amp;/g;
			print $xml "\n\t\t\t<issue>$issue</issue>";
		}
		print $xml "\n\t\t</issues>";
	}

	print $html '</body></html>';
	close $html;

	$printed{$person->{'xref'}} = 1;

	print "Done\n" if($opts{'v'});
}

sub Gedcom::Individual::as_string
{
	my $self = shift;
	my %args = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $name;

	if($args{'use_aka'}) {
		my $n2 = $self->tag_record('NAME', 2);
		if(defined($n2) && (ref($n2) eq 'Gedcom::Record') && defined($n2->type()) && ($n2->type() eq 'AlsoKnownAs') && ($n2->value() ne $self->name())) {
			$name = $n2->value();
		} else {
			return;
		}
	} else {
		$name = $self->name();
	}

	$name =~ s/\///g;
	$nameparser->parse($name);

	my %name_components = $nameparser->components();
	my $first_name = $name_components{'given_name_1'};
	my $middle_name = $name_components{'middle_name'};
	my $surname = $name_components{'surname_1'};
	if($name_components{'surname_2'}) {
		$surname .= ' ' . $name_components{'surname_2'};
	}
	if($name_components{'non_matching'}) {
		if($name =~ /(\w{2,})\s(\w{2,})\s(\w+)\s(\w{2,})/) {
			# Name parser doesn't parse names like this very well
			$first_name = $1;
			$middle_name = "$2 $3";
			$surname = $4;
		} else {
			if($surname) {
				$surname .= ' ';
			}
			my $rest = $name_components{'non_matching'};
			if($rest =~ /(.+) $/) {
				$rest = $1;
			}
			$surname .= $rest;
		}
	} elsif(!defined($surname)) {
		$surname = $self->surname();
	}

	my $has_maiden_name;
	if($args{'nee'}) {
		my $sex = get_value({ person => $self, value => 'sex' });
		if(defined($sex) && ($sex eq 'F')) {
			if(my $husband = $self->husband()) {
				$surname = $husband->surname();
				$has_maiden_name = 1;
			} elsif(my $spouse = $self->spouse()) {
				if($opts{'f'}) {
					die 'married, but no husband relationship';
				}
				if($opts{'w'}) {
					red_warning({ person => $self, warning => 'married, but no husband relationship' });
				}
				$surname = $spouse->surname();
				$has_maiden_name = 1;
			}
		}
	}

	my $rc;

	if($args{'title'} && $name_components{'title_1'}) {
		$rc = $name_components{'title_1'};
		if($rc) {
			$rc .= ' ';
		}
	}

	if($first_name) {
		$rc .= $first_name;
	} else {
		$rc .= $self->given_names();
	}

	if($args{'middle_names'}) {
		if($middle_name) {
			$rc .= " $middle_name";
		} elsif($name =~ /\s([A-Z])\s.+/) {
			# Just an initial has been given
			$rc .= " $1";
		}
	}

	if($surname) {
		if($rc) {
			$rc .= ' ';
		}
		$rc .= normalize_name($surname);
		if(my $suffix = $name_components{'suffix'}) {
			$rc .= " $suffix";
		}
	} elsif($args{'print_unknown'}) {
		$rc .= ' UNKNOWN';
	}

	if($has_maiden_name && $self->surname()) {
		$rc .= ' (n&eacute;e ' . normalize_name($self->surname()) . ')';
	}

	if(!defined($rc)) {
		if($opts{'f'}) {
			die "Can't determine name of this person";
		}
		if($opts{'w'}) {
			red_warning({ warning => "Can't determine name of this person" });
			$args{'include_years'} = 1;
			$rc = 'Unknown person ';
		}
	}

	if($args{'include_years'}) {
		my $dob = get_value({ person => $self, value => 'birth date' });

		my $yob;	# Year of birth
		if($dob && ($dob =~ /.*?(\d{3,4})/)) {
			if($dob =~ /^(Abt|ca?)\.?\s*(.+)/i) {
				my $year = $2;
				if($year =~ /^[A-Z]{3}\s(.+)/i) {
					$yob = "c$1";	# Get the "1951" from "Feb 1951"
				}
				$yob = "c$year";
			} else {
				$yob = $1;
			}
		} else {
			$dob = get_value({ person => $self, value => 'baptism date' });
			if($dob && ($dob =~ /.*?(\d{3,4})/)) {
				$yob = "c$1";
			}
		}

		my $dod = get_value({ person => $self, value => 'death date' });

		my $yod;	# Year of death
		if($dod && ($dod =~ /.*?(\d{3,4})/)) {
			$yod = $1;
		} else {
			$dod = get_value({ person => $self, value => 'burial date' });
			if($dod && ($dod =~ /.*?(\d{3,4})/)) {
				$yod = "c$1";
			}
		}

		$rc .= ' ' if($yob || $yod);

		if($yob) {
			$rc .= "$yob ";
		}

		$rc .= '-' if($yob || $yod);

		if($yod) {
			return "$rc $yod";
		}
	}

	if((!defined($rc)) && $opts{'w'}) {
		if($opts{'f'}) {
			die "\nCan't determine the name for record " . $self->{'xref'};
		}
		red_warning({ "Can't determine the name for record " . $self->{'xref'} });
		return '';
	}

	$rc =~ tr/"/'/;	# fix issues with Graphviz and others

	return $rc;
}

sub normalize_name
{
	# my $name = shift;

	# my $rc;
	# foreach my $word(split(/-| |'/, lc($name))) {
		# $rc .= '-' if($rc && ($name =~ /-/));
		# $rc .= "'" if($rc && ($name =~ /'/));
		# $rc .= ' ' if($rc && ($name =~ / /));
		# $rc .= ucfirst($word);
	# }

	# return $rc;

	return Lingua::EN::NameCase::nc(shift);
}

sub Gedcom::Individual::pronoun
{
	my $self = shift;

	my $sex = get_value({ person => $self, value => 'sex' });

	if(defined($sex)) {
		if($sex eq 'F') {
			return 'She';
		}
		if($sex eq 'M') {
			return 'He';
		}
	}
	return 'They';
}

sub Gedcom::Individual::possessive
{
	my $self = shift;

	my $rc = {
		'He' => 'His',
		'She' => 'Her',
		'They' => 'Their',
	};

	return $rc->{$self->pronoun()};
}

# FIXME: currently only finds ancestors
# TODO: find in-laws
# See http://www.myrelative.com/html/relationship.html for inspiration
sub Gedcom::Individual::relationship
{
	my $self = shift;
	my $other = shift;

	unless(@myancestors) {
		@myancestors = $self->ancestors();
	}
	return unless @myancestors;

	my $sex = get_value({ person => $other, value => 'sex' }) || $other->sex();
	if((!defined($sex)) || ($sex !~ /[MF]/)) {
		if($opts{'f'}) {
			die "\n", $other->as_string(), ": unknown sex\n";
		}
		if($opts{'w'}) {
			red_warning({ person => $other, warning => 'unknown sex' });
		}
		return;
	}

	foreach my $person1(@myancestors) {
		die if($person1 eq $self);
		if($person1 eq $other) {
			# Direct ancestor
			my $steps = stepsabove($self, $other, 0);
			my $title = ($sex eq 'M') ? 'father' : 'mother';
			if($steps >= 5) {
				$steps -= 2;
				return "$steps times great-grand$title";
			} elsif($steps == 1) {
				return $title;
			} elsif($steps == 2) {
				return "grand$title";
			} elsif($steps == 3) {
				return "great-grand$title";
			} elsif($steps == 4) {
				return "great-great-grand$title";
			} elsif($steps <= 0) {
				if(my $spouse = $other->spouse()) {
					if(stepsabove($self, $spouse, 0)) {
						# The caller should now check
						# the spouse's relationship
						return;
					}
				}
				if($opts{'f'}) {
					die $other->as_string(), ": BUG - not a direct ancestor, steps = $steps";
				} else {
					warn colored($other->as_string() . ": BUG - not a direct ancestor, steps = $steps", 'red');
				}
			}
		}
	}

	my @ancestors2 = $other->ancestors();
	return unless(@ancestors2);

	foreach my $person1(@myancestors) {
		foreach my $person2(@ancestors2) {
			# print $person1->as_string(), '->', $person2->as_string(), "\n";
			# G::C is noisy
			# TODO - apparently fixed in Github, awaiting new version on CPAN
			# my $c = Gedcom::Comparison->new($person1, $person2);
			# if($c->identical($person2)) {
				# die 'match found';
			# }
			if($person1 eq $person2) {
				# Common ancestor is $person2
				my $steps1 = stepsabove($self, $person1, 0);
				return if($steps1 > 7);
				my $steps2 = stepsabove($other, $person2, 0);
				return if($steps2 > 7);

				# It would be nice to do this as an algorithm, but this will do
				# e.g. 2, 1 is uncle
				my %male_relationships = (
					1 << 8 | 1 => 'brother',
					1 << 8 | 2 => 'nephew',
					2 << 8 | 1 => 'uncle',
					3 << 8 | 1 => 'great-uncle',
					4 << 8 | 1 => 'great-great-uncle',
					2 << 8 | 2 => 'cousin',
					2 << 8 | 3 => 'first cousin once-removed',
					3 << 8 | 2 => 'first cousin once-removed',
					2 << 8 | 4 => 'first cousin twice-removed',
					3 << 8 | 3 => 'second cousin',
					3 << 8 | 4 => 'second cousin once-removed',
					4 << 8 | 2 => 'first cousin twice-removed',
					4 << 8 | 3 => 'second cousin once-removed',
					5 << 8 | 2 => 'first cousin three-times-removed',
					5 << 8 | 3 => 'second cousin twice-removed',
					5 << 8 | 4 => 'third cousin once-removed',
					6 << 8 | 3 => 'second cousin three-times-removed',
					6 << 8 | 4 => 'third cousin twice-removed',
					6 << 8 | 5 => 'fourth cousin once-removed',
					6 << 8 | 6 => 'sixth cousin',
					7 << 8 | 3 => 'second cousin four-times-removed',
					7 << 8 | 4 => 'third cousin three-times-removed',
					7 << 8 | 5 => 'fourth cousin twice-removed',
					7 << 8 | 6 => 'fifth cousin once-removed',
				);
				my %female_relationships = (
					1 << 8 | 1 => 'sister',
					1 << 8 | 2 => 'niece',
					2 << 8 | 1 => 'aunt',
					2 << 8 | 2 => 'cousin',
					2 << 8 | 3 => 'first cousin once-removed',
					2 << 8 | 4 => 'first cousin twice-removed',
					3 << 8 | 1 => 'great-aunt',
					3 << 8 | 2 => 'first cousin once-removed',
					3 << 8 | 3 => 'second cousin',
					3 << 8 | 5 => 'second cousin twice-removed',
					3 << 8 | 4 => 'second cousin once-removed',
					4 << 8 | 1 => 'great-great-aunt',
					4 << 8 | 2 => 'first cousin twice-removed',
					4 << 8 | 3 => 'second cousin once-removed',
					5 << 8 | 2 => 'first cousin three-times-removed',
					5 << 8 | 3 => 'second cousin twice-removed',
					5 << 8 | 4 => 'third cousin once-removed',
					6 << 8 | 3 => 'second cousin three-times-removed',
					6 << 8 | 4 => 'third cousin twice-removed',
					6 << 8 | 5 => 'fourth cousin once-removed',
					6 << 8 | 6 => 'sixth cousin',
					7 << 8 | 3 => 'second cousin four-times-removed',
					7 << 8 | 4 => 'third cousin three-times-removed',
					7 << 8 | 5 => 'fourth cousin twice-removed',
					7 << 8 | 6 => 'fifth cousin once-removed',
				);

				my $rc = ($sex eq 'M') ?
					$male_relationships{($steps1 << 8) | $steps2} :
					$female_relationships{($steps1 << 8) | $steps2};
				if(defined($rc) && ($rc =~ /cousin/)) {
					my $myfather = $self->father();
					my $mymother = $self->mother();
					if($myfather && (stepsabove($myfather, $person2, 0) > 0)) {
						$rc .= ' on the father\'s side';
					} elsif($mymother && (stepsabove($mymother, $person2, 0) > 0)) {
						$rc .= ' on the mother\'s side';
					}
				}
				# print "$steps1, $steps2\n" if(!defined($rc));

				return $rc;
			}
		}
	}
}

sub stepsabove
{
	my $person = shift;
	my $target = shift;
	my $count = shift;

	return -1 if($count == -1);

	if($person eq $target) {
		return $count;
	}

	my @father = $person->father();
	if(my $father = $father[0]) {
		my $rc = stepsabove($father, $target, $count + 1);
		return $rc if($rc != -1);
	}

	my @mother = $person->mother();
	if(my $mother = $mother[0]) {
		return stepsabove($mother, $target, $count + 1);
	}

	return -1;
}

sub year
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $string = $params{'string'} || $params{'date'};

	if(!defined($string)) {
		$string = $params{'record'};
		return unless($string);

		if(ref($string) eq 'Gedcom::Record') {
			$string = $string->date();
			return unless($string);
		}
	}

	if($string =~ /^\d{3,4}$/) {
		return "in $string";
	}
	if($string =~ /^(Abt|ca?)\.?\s*(.+)/i) {
		if($params{'circa'}) {
			return $params{'circa'} . " $2";
		}
		return "<i>c.</i> $2";
	}
	if($string =~ /^bet (.+) and (.+)/i) {
		my $from = year({ %params, string => $1 });
		my $to = year({ %params, string => $2 });
		$from =~ s/^(in|on|c.) //;
		$to =~ s/^(in|on|c.) //;
		return "from $from to $to";
	}

	if($string =~ /(.+)\s(\d{4})\/\d{2}/) {
		my $year = $2 + 1;
		if($opts{'w'}) {
			my $person = $params{'person'};
			if($opts{'f'}) {
				die $person->as_string(), ": old-style date ($string) should be in $year";
			}
			red_warning({ person => $person, warning => "old-style date ($string) should be in $year" });
		}
		$string = "$1 $year";
	}

	if(($string =~ /^\d/) && ($string !~ /[a-z]$/i)) {
		my $person = $params{'person'};
		if($string =~ /^31 Nov/) {
			if($opts{'f'}) {
				die $person->as_string(), ": $string is invalid, there are only 30 days in November";
			}
			if($opts{'w'}) {
				red_warning({ person => $person, warning => "$string is invalid, there are only 30 days in November" });
			}
			return;
		}
		if(my $d = date_parser_cached(date => $string)) {
			$d = $dfn->parse_datetime($d->{'canonical'});
			if(my $must_postdate = $params{'must_postdate'}) {
				if($opts{'f'}) {
					die $person->as_string(), ": Something is wrong with the date $string which should be after ", $must_postdate->strftime('%x') if($d < $must_postdate);
				}
				if($opts{'w'}) {
					red_warning({ person => $person, warning => "something is wrong with the date $string which should be after " . $must_postdate->strftime('%x') }) if($d < $must_postdate);
				}
			}
			if(my $must_predate = $params{'must_predate'}) {
				if($opts{'f'}) {
					die $person->as_string(), ": Something is wrong with the date $string which should be before ", $must_predate->strftime('%x') if($d > $must_predate);
				}
				if($opts{'w'}) {
					red_warning({ person => $person, warning => "something is wrong with the date $string which should be before " . $must_predate->strftime('%x') }) if($d > $must_predate);
				}
			}
			if($ENV{'LANG'}) {
				$d->set_locale($ENV{'LANG'});
			}
			return 'on ' . $d->strftime('%x');
		}
		if($@) {
			# RT 107354
			chomp $@;
			if($opts{'f'}) {
				if($person) {
					die $person->as_string() . ": $@";
				} else {
					die $@;
				}
			}
			if($opts{'w'}) {
				red_warning({ person => $person, warning => $@ });
			}
		}
		return "on $string";
	}
	if($string =~ /^bef.? (\d{3,4})/i) {
		return "before $1";
	}
	if($string =~ /^by.? (\d{3,4})/i) {
		return "by $1";
	}
	if($string =~ /^By (\d{3,4})/i) {
		my $person = $params{'person'};
		if($opts{'f'}) {
			if($person) {
				die $person->as_string() . " says 'By' instead of 'Bef'";
			} else {
				die "Got 'By' instead of 'Bef'";
			}
		}
		if($opts{'w'}) {
			if($person) {
				red_warning({ person => $person, warning => "says 'By' instead of 'Bef'" });
			} else {
				warn colored("Got 'By' instead of 'Bef'", 'red');
			}
		}
		return "before $1";
	}

	$string = ucfirst(lc($string));
	return "in $string";
}

sub place
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $place = $params{'place'};
	my $address = $params{'address'};

	if(!defined($place)) {
		$place = $params{'record'};
		return unless($place);

		if(ref($place) eq 'Gedcom::Record') {
			$address = $place->address();
			if(ref($address) eq 'Gedcom::Record') {
				$place = getaddress($address);
				$address = undef;
			} else {
				$place = $place->place();
			}
			return unless($place);
		}
	} elsif(ref($address) eq 'Gedcom::Record') {
		$place = getaddress($address);
		$address = undef;
	}

	if((!defined($address)) &&
	   ($place !~ /USA$/) && ($place !~ /United States$/) &&
	   ($place =~ /(.+),\s*(.+,\s*.+,\s*.+)$/)) {
		$address = $1;
		$place = $2;
	}

	# Google maps (and possibly others) sometimes works better with full names
	if($address) {
		if($address =~ /(.+)\sSt\.?$/) {
			$address = "$1 Street";
		} elsif($address =~ /(.+)\sAve\.?$/) {
			$address = "$1 Avenue";
		} elsif($address =~ /(.+)\sRd\.?$/) {
			$address = "$1 Road";
		}
	}

	my $there = $params{'there'};

	if($there && ($place eq $there)) {
		if($address) {
			if($place =~ /^(.+?),.+,/) {
				return " at $address, $1";
			}
		} else {
			return ' there';
		}
	}

	if($params{'person'}) {
		validate_place({ person => $params{'person'}, place => $place });
	}

	if($place =~ /^\d/) {
		if(my $places_printed = $params{'places_printed'}) {
			$places_printed->{" at$place"} = 1;
			if($place =~ /(.+),(.+?),(.+?),(.+?),(.+?)$/) {
				if($places_printed->{" in$3,$4,$5"}) {
					$places_printed->{"at $1,$2,$3"} = 1;
					return " at $1,$2,$3";
				}
			}
			if($place =~ /(.+),(.+?),(.+?),(.+?)$/) {
				$places_printed->{" in$2,$3,$4"} = 1;
			}
		}
		return " at $place";
	}

	if($place eq 'USA') {
		return ' in the USA';
	}

	if($address) {
		$place = " at $address, $place";
	} elsif($params{'nopreposition'}) {
		$place = " $place";
	} else {
		$place = " in $place";
	}

	# Only print the town if the location has already been printed
	if(my $places_printed = $params{'places_printed'}) {
		if($places_printed->{$place} && $place =~ /^(.+?),/) {
			return $1;
		}
		if($place =~ /(.+),(.+?),(.+?),(.+?)$/) {
			my $str = "$2,$3,$4";
			if($params{'person'}) {
				validate_place({ person => $params{'person'}, place => $place });
			}
			if($places_printed->{" in$str"}) {
				if(($4 eq ' USA') || ($4 eq ' Canada')) {
					return "$1,$3";
				}
				return $address ? "$1,$2" : "$1 in$2";
			}
			if($places_printed->{" at$str"}) {
				return "$1,$2";
			}
			$str = "$3,$4";
			if($places_printed->{" in$str"}) {
				return "$1,$2,$3";
			}
			if($places_printed->{" at$str"}) {
				return "$1,$2,$3";
			}
			$places_printed->{" in$str"} = 1;
			$places_printed->{" in$2,$3,$4"} = 1;
		} elsif($place =~ /(.+),(.+),(.+)$/) {
			if($places_printed->{" in$2,$3"}) {
				# We did place, county, country before, so just
				# return place, county
				return "$1,$2";
			}
			$places_printed->{" in$2,$3"} = 1;
		}
		$places_printed->{$place} = 1;
	}
	return HTML::Entities::encode($place);
}

sub getaddress {
	my $address = shift;

	my $rc;

	if(my $city = $address->city()) {
		$rc = $city;
	}
	if(my $state = $address->state()) {
		if($rc) {
			$rc .= ', ';
		}
		$rc .= $state;
	}
	if(my $country = $address->country()) {
		if($rc) {
			$rc .= ', ';
		}
		$rc .= $country;
	}

	return $rc;
}

sub notes
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $record = $params{'record'};
	my $person = $params{'person'};
	my $paragraph = $params{'paragraph'};
	my @notes = $record->get_record('note');
	my $note_locations = $params{note_locations};

	# my @deathnotes = get_value({ person => $person, value => 'death note' });
	# my @deathnotes = $person, value => 'death note' });
	my $rc = $record->get_value();
	$rc .= '.' if($rc && !scalar(@notes));

	foreach my $note(@notes) {
		if($note) {
			if(ref($note) eq 'Gedcom::Record') {
				if($note->cont()) {
					my $n = $note->value();
					$n =~ s/\r//g;
					$n =~ s/\.$//;
					foreach my $c($note->cont()) {
						if((!ref($c)) && length($c)) {
							$c =~ s/\s\s+/ /g;
							$c =~ s/\.$//;
							if($n =~ /[;:]$/) {
								$n .= " $c";
							} else {
								$n .= ". $c";
							}
						}
					}
					$note = $n;
				} elsif($note->conc()) {
					my $n = $note->value();
					$n =~ s/\r//g;
					$n =~ s/\.$//;
					foreach my $c($note->conc()) {
						if((!ref($c)) && length($c)) {
							$c =~ s/\s\s+/ /g;
							$n .= $c;
						}
					}
					$note = $n;
				} else {
					$note = $note->value();
				}
			}
			$note =~ s/\r//g;
			$note =~ tr/\n/ /;
			$note =~ s/\.$//;
			$note =~ s/\xe2\x80\x9c/"/g;	# left quotation
			$note =~ s/\xe2\x80\x9d/"/g;	# right quotation
			$note =~ s/\xe2\x80\x99/\'/g;
			$note =~ s/[\x93\x94]/"/g;
			$note =~ s/[\x91\x92]/'/g;
			if($paragraph) {
				$rc .= '<p>' . HTML::Entities::encode($note) . '.</p>';
			} else {
				if($rc) {
					$rc .= ' ';
				}
				$rc .= HTML::Entities::encode($note) . '.';
			}
		}
	}
	if(defined($rc)) {
		my $ufinder = URI::Find::Schemeless->new(sub {
			my($uri, $orig_uri) = @_;

			if($orig_uri =~ /(.+):$/) {
				$orig_uri = $1;
			}
			my $u = URI->new($orig_uri);
			if($u && (ref($u) ne 'URI::_generic')) {
				# Some sites give 404 on HEAD but work on GET
				if((!head($orig_uri)) && !get($orig_uri)) {
					if($opts{'f'}) {
						die $person->as_string, ": $orig_uri: in notes is not found";
					}
					red_warning({ person => $person, warning => "$orig_uri: in notes is not found" });
				}
				$uri =~ s/:$//;
				return "<a HREF=\"$uri\">" .
					$u->host() .
					'</a>';
			}
			return $orig_uri;
		});

		$rc =~ s/\n/<br>/g;
		$rc =~ s/\s\s+/ /g;
		$rc =~ s/ $//;
		$rc =~ s/!/\&excl;/g;	# ! is the sep_char
		$ufinder->find(\$rc);

		if(defined($ENV{'LANG'})) {
			if($ENV{'LANG'} =~ /^en_US/) {
				return Lingua::EN::ABC::b2a($rc);
			} elsif($ENV{'LANG'} =~ /^en_GB/) {
				return Lingua::EN::ABC::a2b($rc);
			}
		}
	}
	if($note_locations && (my $hr = $textgeocoder->scantext(scantext => $rc, strict => 1))) {
		if(length($rc) > 15) {
			$hr->{'text'} = substr($rc, 0, 14) . '...';
		} else {
			$hr->{'text'} = $rc;
		}
		push @{$note_locations}, $hr;
	}
	return($rc);
}

sub validate_place
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $place = $params{'place'};
	if(!$place) {
		my $i = 0;
		print STDERR "\n";
		while((my @call_details = caller($i++))) {
			print STDERR "\t", colored($call_details[2] . ' of ' . $call_details[1], 'red'), "\n";
		}
		die 'place is not optional';
	}

	$place =~ s/^\s+//;
	if($places{$place}) {
		return $places{$place};
	}

	# US and Canada are more logical, using city,county,state,country, than other countries
	if($opts{'w'} && (($place !~ /,.*,.*,.*/) || ($place =~ /USA|Canada/i))) {
		if($place =~ /(.*),\s*Independent Cities\s*(.*)/i) {
			$place = "$1$2";
		}
		$place =~ s/^(in|at)\s//;
		if($places{$place}) {
			return $places{$place};
		}
		# my $ap;
		# my $p = $place;
		# if(($place =~ /USA$/) || ($place =~ /United States$/)) {
			# $ap = Lingua::EN::AddressParse->new(country => 'US', auto_clean => 1, force_case => 1, force_post_code_flag => 0);
		# } elsif($place =~ /England$/) {
			# $ap = Lingua::EN::AddressParse->new(country => 'GB', auto_clean => 1, force_case => 1, force_post_code_flag => 0);
			# $p .= ', United Kingdom';
		# }
		# if($ap) {
			# my $error = $ap->parse("$address, $p");
			# print $ap->report();
		# }
		if(($place =~ /USA$/) || ($place =~ /United States$/)) {
			if(my $href = Geo::StreetAddress::US->parse_location($place)) {
				if($href->{'state'} && !$us->{code2state}{$href->{'state'}}) {
					my $person = $params{'person'};
					if($opts{'f'}) {
						die $person->as_string(), ": Unknown state in $place";
					}
					red_warning({ person => $person, warning => "Unknown state in $place" });
				}
			}
		}

		my $town = $place;
		if($place =~ /,\s*(.+,.+,.+,.+)$/) {
			# Use only the town part
			$town = $1;
		}
		if($opts{'w'} && !$geocoder->geocode($town)) {
			# Don't die because there are many
			# false positives as locations
			# may no longer exist
			if(my $person = $params{'person'}) {
				warn colored($person->as_string({ include_years => 1 }) . ": unknown location $place", 'red');
			} else {
				warn colored("Unknown location $place", 'red');
			}
			$places{$place} = 0;
			$places{$town} = 0;
			return 0;
		}
		$places{$town} = 1;
	}
	$places{$place} = 1;
	return 1;
}

sub person_line_html
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $person = $params{'person'};

	if($opts{'l'} || !is_alive(%params)) {
		my $dob = get_value({ person => $person, value => 'birth date' });
		if($dob) {
			return '<a href="' . make_filename_from_person(person => $person) . '">' .
				$person->given_names() .
				'</a> was born ' .
				year({ person => $person, date => $dob });
		} elsif(get_value({ person => $person, value => 'baptism date' })) {
			return '<a href="' . make_filename_from_person(person => $person) . '">' .
				$person->given_names() .
				'</a> was born c. ' .
				get_value({ person => $person, value => 'baptism date' });
		}
		return '';
	}
	return '<a href="' . make_filename_from_person(person => $person) . '">' .
		$person->given_names() .
		'</a>';
}

sub person_line_csv
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $person = $params{'person'};

	if($opts{'l'} || !is_alive(%params)) {
		my $dob = get_value({ person => $person, value => 'birth date' });
		if($dob) {
			return '<a href="?page=people&entry=' . $person->{'xref'} . '">' .
				$person->given_names() .
				'</a> was born ' .
				year({ person => $person, date => $dob });
		} elsif(get_value({ person => $person, value => 'baptism date' })) {
			return '<a href="?page=people&entry=' . $person->{'xref'} . '">' .
				$person->given_names() .
				'</a> was born c. ' .
				get_value({ person => $person, value => 'baptism date' });
		}
		return '';
	}
	return '<a href="?page=people&entry=' . $person->{'xref'} . '">' .
		$person->given_names() .
		'</a>';
}

sub places_are_the_same
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $record1 = $params{'first'};
	my $record2 = $params{'second'};

	die 'first is not optional' unless $record1;
	die 'second is not optional' unless $record2;

	my $place1 = $record1->place();
	return 0 unless(defined($place1));
	my $place2 = $record2->place();
	return 0 unless(defined($place2));

	if(my $person = $params{'person'}) {
		validate_place({ person => $person, place => $place1 });
		validate_place({ person => $person, place => $place2 });
	}

	if(my $address = $record1->address()) {
		$place1 = "$address, $place1";
	}
	if(my $address = $record2->address()) {
		$place2 = "$address, $place2";
	}
	return $place1 eq $place2;
}

sub sibling_baptism_string
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $person = $params{'person'};
	my $siblings = $params{'siblings'};
	my $date = $params{'date'};
	my $birthdate = $params{'birthdate'};

	return '' if(scalar(@{$siblings}) == 0);

	my @onsameday;
	foreach my $sibling(@{$siblings}) {
		my $dateofsiblingbaptism = get_value({ person => $sibling, value => 'baptism date' });
		if($dateofsiblingbaptism && ($dateofsiblingbaptism eq $date)) {
			push @onsameday, $sibling;
		}
	}
	my $allsamesex = 1;
	if(scalar(@onsameday) > 1) {
		foreach my $sibling(@onsameday) {
			if($sibling->sex() ne $person->sex()) {
				$allsamesex = 0;
				last;
			}
		}
		if($allsamesex) {
			foreach my $sibling(@onsameday) {
				my $dateofsiblingbirth = get_value({ person => $sibling, value => 'birth date' });
				if($dateofsiblingbirth && $birthdate && ($dateofsiblingbirth eq $birthdate)) {
					$allsamesex = 0;	# Fudge to force special twin handler
				}
			}
		}
	} else {
		$allsamesex = 0;
	}

	if($allsamesex) {
		return ', the same day as ' . lcfirst($person->possessive()), ' ' .
			($onsameday[0]->sex() eq 'M' ? 'brothers ' : 'sisters ') .
			Lingua::EN::Inflect::WORDLIST((map { $_->given_names() } @onsameday), {final_sep => ''});
	}
	my $count = 0;
	my $rc = '';
	foreach my $sibling(@onsameday) {
		if($count == 0) {
			$rc = ', the same day as ';
		} elsif($count < (scalar(@onsameday) - 1)) {
			$rc .= ', ';
		} elsif($count == (scalar(@onsameday) - 1)) {
			$rc .= ' and ';
		}
		$rc .= lcfirst($person->possessive()) . ' ';
		my $dateofsiblingbirth = get_value({ person => $sibling, value => 'birth date' });
		if($dateofsiblingbirth && $birthdate && ($dateofsiblingbirth eq $birthdate)) {
			$rc .= 'twin ';
		}
		$rc .= ($sibling->sex() eq 'M' ? 'brother ' : 'sister ') .
			$sibling->given_names();
		$count++;
	}
	return $rc;
}

sub red_warning
{
	if($opts{'w'}) {
		my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

		die "What do you want to say?" unless($params{'warning'});

		my $warning = HTML::Entities::decode($params{'warning'});
		if($params{'person'}) {
			my @call_details = caller(0);
			warn colored(['red'], $params{'person'}->as_string(), ": $warning at line ", $call_details[2]);
			push @{$params{'person'}->{'warnings'}}, $warning;
		} else {
			warn colored(lcfirst($warning), 'red');
		}
		# my $i = 0;
		# while((my @call_details = (caller($i++)))) {
			# print STDERR "\t", colored($call_details[1] . ':' . $call_details[2] . ' calling function ' . $call_details[3], 'red'), "\n";
		# }
	}
}

# Cache gedcom values
sub get_value
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	if($fetcher) {
		my $args = {
			object => $params{'person'},
			message => 'get_value',
			arg => $params{'value'}
		};

		# Doesn't use the prefetching feature, but will automatically cache which is nice
		# $fetcher->prime($args);
		return $fetcher->get($args);
	}
	return $params{'person'}->get_value($params{'value'});
}

sub get_source
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $args = {
		object => $params{'gedcom'},
		message => 'get_source',
		arg => $params{'source'}
	};

	# Doesn't use the prefetching feature, but will automatically cache which is nice
	# $fetcher->prime($args);
	return $fetcher->get($args);
}

# Inspired by Tree::Family.  That module doesn't quite do what I want, so
# I've mercilessly re-used the ideas of what to do from it.
sub print_graphviz
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $fout = $params{'fout'};
	my $person = $params{'person'};
	my $colour = $params{'colour'};
	my $profile_image = $params{'profile_image'};

	if(!defined($colour)) {
		my $gender = get_value({ person => $person, value => 'sex' }) || $person->sex();
		if(defined($gender)) {
			$gender = $gender;
		} else {
			if($opts{'f'}) {
				die "\n", $person->as_string(), ": unknown sex\n";
			}
			if($opts{'w'}) {
				red_warning({ person => $person, warning => 'unknown sex' });
			}
			$gender = 'M';	# Avoid "Use of uninitialized value" in Tree::Family
		}
		$colour = ($gender eq 'M' ? '#093AB5' : '#C666B8');
	}

	print $fout $person->{'xref'}, ' [shape=box,fontsize="10",',
		"color=\"$colour\",";

	if($params{'format'} eq 'dynamic') {
		print $fout 'href="?page=people&entry=', $person->{'xref'}, '",';
	} else {
		print $fout 'href="', make_filename_from_person(person => $person), '",';
	}

	my $label = $person->as_string();
	my $dob = get_value({ person => $person, value => 'birth date' });
	my $dod = get_value({ person => $person, value => 'death date' });

	my $thumbnail;

	# If you get 'Warning: No loadimage plugin for "jpeg:cairo"', do this
	# instead:
	# if(0) {
	if($profile_image && (defined($dod) || $opts{'l'})) {
		if(defined($dob)) {
			$dob .= "<TR><TD>b. $dob</TD></TR>";
		} else {
			$dob = '';
		}
		if(defined($dod)) {
			$dod .= "<TR><TD>d. $dod</TD></TR>";
		} else {
			$dod = '';
		}
		# Create a thumbnail
		my $image = Image::Magick->new();
		$image->read($profile_image);
		my ($thumb, $x, $y) = Image::Magick::Thumbnail::create($image, 100);
		my @thumbname = File::Basename::fileparse($profile_image);
		# use PNG to try to avoid
		#	'Warning: No loadimage plugin for "jpeg:cairo"'
		$thumbname[0] =~ s/\.jpg$/.png/;
		$thumbnail = "thumbs/$thumbname[0]";
		$thumb->Write($thumbnail);

		# FIXME: TABLE isn't supported by Graphviz
		print $fout "label=<<TABLE border=\"0\" cellborder=\"0\"><TR><TD><IMG SRC=\"thumbs/$thumbname[0]\" scale=\"true\"/></TD></TR><TR><TD>$label</TD></TR>$dob$dod</TABLE>>",
			",labelloc=b";

		# print $fout ",image=\"$profile_image\",labelloc=b";

		chmod 0444, $thumbnail;
	} elsif(defined($dod) || $opts{'l'}) {
		if(defined($dob)) {
			$label .= "\\nb. $dob";
		}
		if(defined($dod)) {
			$label .= "\\nd. $dod";
		}
		print $fout "label=\"$label\"";
	} else {
		print $fout "label=\"$label\"";
	}

	print $fout "];\n";

	return $thumbnail;
}

sub is_alive
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $person = $params{'person'};

	if($person->get_record('death') || get_value({ person => $person, value => 'death date' })) {
		return 0;
	}
	if($person->get_record('burial')) {
		return 0;
	}
	my $dob = get_value({ person => $person, value => 'birth date' });

	if(!defined($dob)) {
		return 0;	# Err on the side of caution
				# TODO: Look at children's lifespan for a clue
	}

	my $year = (localtime)[5];
	$year += 1900 if($year < 1900);

	if(($dob =~ /^\d{3,4}$/) && ($dob < ($year - 100))) {
		return 0;
	}
	if($dob =~ /^abt (\d{4})$/i) {
		$dob = $1;
	}
	if(($dob =~ /^\d/) && ($dob !~ /[a-z]$/i)) {
		if(my $d = date_parser_cached(date => $dob)) {
			$d = $dfn->parse_datetime($d->{'canonical'});
			if($d->strftime('%Y') < ($year - 120)) {
				return 0;
			}
		}
	}
	return 1;
}

sub make_filename_from_person
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $person = $params{'person'};

	die if(!defined($person));

	my $rc = $person->as_string(include_years => 1);
	$rc =~ tr/ /-/s;
	$rc =~ tr/ /-/s;
	$rc =~ tr/"/'/s;
	$rc =~ tr/\//-/s;
	$rc =~ s/--+/-/g;
	# $rc =~ s/--/-/g;
	$rc =~ s/-$//;

	return "$rc.html";
}

sub make_filename_from_object
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $object = $params{'object'};

	my $rc = $object->title();
	if(!$rc) {
		return $object->{'xref'};
	}
	$rc =~ tr/ /-/s;
	$rc =~ tr/'/-/s;
	$rc =~ tr/\//-/s;
	$rc =~ s/--+/-/g;
	# $rc =~ s/--/-/g;
	$rc =~ s/-$//;

	return $rc;
}

# Genealogy::Gedcom::Date is expensive, so cache results
sub date_parser_cached
{
	my %params;

	if(ref($_[0]) eq 'HASH') {
		%params = %{$_[0]};
	} elsif(scalar(@_) % 2 == 0) {
		%params = @_;
	} else {
		$params{'date'} = shift;
	}

	my $date = $params{'date'};

	if($all_dates{$date}) {
		print "$date is already known\n" if($opts{'v'});
		return $all_dates{$date};
	}
	print "Parse date $date\n" if($opts{'v'});
	my $d;
	eval {
		$d = $date_parser->parse(date => $date);
	};
	if($d) {
		$d = @{$d}[0];
		$all_dates{$date} = $d;
		return $d;
	}
}

sub date_to_datetime
{
	my %params;

	if(ref($_[0]) eq 'HASH') {
		%params = %{$_[0]};
	} elsif(scalar(@_) % 2 == 0) {
		%params = @_;
	} else {
		$params{'date'} = shift;
	}

	my $date = $params{'date'};
	if($date && ($date !~ /^\d{3,4}$/) && ($date =~ /^\d/)) {
		if(my $d = date_parser_cached($date)) {
			return $dfn->parse_datetime($d->{'canonical'});
		}
	}
}

sub add_marker
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $person = $params{'person'};
	my $map = $params{'map'};
	my $place = $params{'place'};

	$place =~ s/\s\s+/ /g;
	if($place =~ /\d/) {	# We have the address, so no need to include the name of the building in the search
		# FIXME: changes Silver Spring, MD 20910, USA to 20910, USA
		$place =~ s/^\D+(.+)/$1/;
	}

	if(my $annotation = $params{'annotation'}) {
		if($map->add_marker(point => $place, html => "$place<br>$annotation")) {
			return;
		}
		if($opts{'w'}) {
			red_warning({ person => $person, warning => "$place isn't found" });
		}
		if($place =~ /,?(.+?),(.+?),(.+?),(.+?)$/) {
			$place = "$1, $2, $3, $4";
			if($map->add_marker(point => $place, html => "$place<br>$annotation")) {
				return;
			}
			$place = "$2, $3, $4";
			$place =~ s/^\s+//;
			$map->add_marker(point => $place, html => "$place<br>$annotation");
		}
	} else {
		if($map->add_marker(point => $place, html => $place)) {
			return;
		}
		if($opts{'w'}) {
			red_warning({ person => $person, warning => "$place isn't found" });
		}
		if($place =~ /,?(.+?),(.+?),(.+?),(.+?)$/) {
			$place = "$1, $2, $3, $4";
			if($map->add_marker(point => $place, html => $place)) {
				return;
			}
			$place = "$2, $3, $4";
			$map->add_marker(point => $place, html => $place);
		}
	}
}

sub cite
{
	# my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my %params;

	if(ref($_[0]) eq 'HASH') {
		%params = %{$_[0]};
	} elsif((scalar(@_) % 2 == 0) && defined($_[0]) && ($_[0] !~ /^\d+$/)) {
		%params = @_;
	} else {
		$params{'citations'} = \@_;
	}

	return '' unless($params{'citations'});
	my @citations = @{$params{'citations'}};
	return '' unless($citations[0]);
	return '' unless(scalar(@citations));

	return '<span class="citation">' . join(',', List::Util::uniq(sort { $a <=> $b } (@citations))) . '</span>';
}
